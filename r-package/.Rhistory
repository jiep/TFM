})
output$descriptiveSummary = DT::renderDataTable(summaryfunction(selectedData()), options = list(dom = 't'))
output$descriptiveVariablesGroup = renderPlotly({
plot = ggplot(datasetInput(), aes(x=selectedData(), fill=datasetInput()[,input$target])) +
geom_histogram(binwidth=.5, position="dodge")
plot = plot + scale_fill_discrete(name=input$target)
plot = plot + scale_x_continuous(name=input$descriptiveVariables) +
scale_y_continuous(name="Count")
p <- ggplotly(plot)
p
})
output$regressionVariable1 = renderUI({
if (identical(datasetInput(), '') || identical(datasetInput(),data.frame())) return(NULL)
cols = colnames(datasetInput())
index = which(names(datasetInput())==input$target)
cols = cols[-index]
selectInput("regressionVariable1", "Variable 1", choices = cols)
})
output$regressionVariable2 = renderUI({
if (identical(datasetInput(), '') || identical(datasetInput(),data.frame())) return(NULL)
cols = colnames(datasetInput())
index = which(names(datasetInput())==input$target)
cols = cols[-index]
selectInput("regressionVariable2", "Variable 2", choices = cols)
})
output$regressionMethod = renderUI({
# TODO: Quitar variable objetivo de la lista
selectInput("regressionMethod", "Regression method", choices = c("linear"))
})
output$regressionPlot = renderPlot({
plots = drawRegressionLines(datasetInput(), input$target)
index1 = which(names(datasetInput())==input$regressionVariable1)
index2 = which(names(datasetInput())==input$regressionVariable2)
p=plots[[index1, index2]]
p
})
output$normalVariable1 = renderUI({
if (identical(datasetInput(), '') || identical(datasetInput(),data.frame())) return(NULL)
cols = colnames(datasetInput())
index = which(names(datasetInput())==input$target)
cols = cols[-index]
selectInput("normalVariable1", "Variable 1", choices = cols)
})
output$normalVariable2 = renderUI({
if (identical(datasetInput(), '') || identical(datasetInput(),data.frame())) return(NULL)
cols = colnames(datasetInput())
index = which(names(datasetInput())==input$target)
cols = cols[-index]
selectInput("normalVariable2", "Variable 2", choices = cols)
})
output$normalRegressionMethod = renderUI({
# TODO: Quitar variable objetivo de la lista
selectInput("normalRegressionMethod", "Regression method", choices = c("linear"))
})
output$observation = renderUI({
if (identical(datasetInput(), '') || identical(datasetInput(),data.frame())) return(NULL)
selectInput("observation", "Observation", choices = 1:dim(datasetInput())[1])
})
output$normPlot = renderPlot({
plot = drawNormalPlot(datasetInput(), input$target, input$normalVariable1, input$normalVariable2, input$observation)
p = ggplotly(plot)
p
})
output$normalPlot = renderPlot({
plot = drawParenclitsNetworks(datasetInput(), input$ input$target, input$observation)
plot
})
})
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
source("scripts/setTargetVariable.R")
require('lme4')
require("igraph")
getParenclitsNetworks = function(data, target, observation){
targetIndex = setTargetVariable(data, target)
adyMatrix = NULL
if(targetIndex != -1){
cols = colnames(data)
classes = unique(data[,targetIndex])
print(classes)
columnsLength = length(cols)
X = data[observation,]
#data = data[setdiff(1:dim(data)[1], observation),]
adyMatrix = matrix(rep(0,(nrow = columnsLength -1)^2), nrow = columnsLength -1, ncol = columnsLength-1)
columns = setdiff(1:columnsLength, c(targetIndex))
colnames(adyMatrix) = colnames(data)[columns]
rownames(adyMatrix) = colnames(data)[columns]
print(columns)
for(i in 1:length(columns)){
for(j in 1:length(columns)){
if(i<j){
formula = as.formula(paste(colnames(data)[j], "~",
paste(colnames(data)[i], "|", paste(colnames(data)[targetIndex], collapse = "+"),sep = "")))
models = lmList(formula, data = data)
class = which(classes == X[1,targetIndex])
cont = 1
probabilities = array()
for(model in models){
probabilities[cont] = dnorm(X[1,i],X[1,i]*model$coefficients[[2]] + model$coefficients[[1]], sd(model$residuals))
cont = cont + 1
}
prob = array()
prob = probabilities/sum(probabilities)
cat("i:", i, "j:", j, "\n")
cat("Probabilidades: ")
print(prob)
index = which.max(x = prob)
i_ = 1
for(model in models){
if(i_ == index){
weight = abs(X[1,j] - (model$coefficients[[2]]*X[1,i]) + model$coefficients[[1]])
}
i_ = i_+1
}
cat("Indice mayor: ", index, "\n", "weight: ", weight, "classes[ind]:", classes[index], "\n")
adyMatrix[i,j] = weight
adyMatrix[j,i] = weight
}
}
}
}
return(adyMatrix)
}
drawParenclitsNetworks = function(data, target, observation){
ady = getParenclitsNetworks(data, target, observation)
network = graph.adjacency(ady, weighted=T, mode = "undirected")
c_scale = colorRamp(c('green','red'))
x = E(network)$weight
x_ = (x-min(x))/(max(x) - min(x))
p=plot(network, edge.color=apply(c_scale(x_), 1, function(x) rgb(x[1]/255,x[2]/255,x[3]/255)),
edge.width=E(network)$weight,
vertex.label.color = "black",
vertex.color = "white",
vertex.size=25*degree(network),
layout=layout.fruchterman.reingold)
return(p)
}
shiny::runApp('ParencliticsNetworks')
source("scripts/setTargetVariable.R")
require('lme4')
require("igraph")
getParenclitsNetworks = function(data, target, observation){
targetIndex = setTargetVariable(data, target)
adyMatrix = NULL
if(targetIndex != -1){
cols = colnames(data)
classes = unique(data[,targetIndex])
print(classes)
columnsLength = length(cols)
X = data[observation,]
#data = data[setdiff(1:dim(data)[1], observation),]
adyMatrix = matrix(rep(0,(nrow = columnsLength -1)^2), nrow = columnsLength -1, ncol = columnsLength-1)
columns = setdiff(1:columnsLength, c(targetIndex))
colnames(adyMatrix) = colnames(data)[columns]
rownames(adyMatrix) = colnames(data)[columns]
print(columns)
for(i in 1:length(columns)){
for(j in 1:length(columns)){
if(i<j){
formula = as.formula(paste(colnames(data)[j], "~",
paste(colnames(data)[i], "|", paste(colnames(data)[targetIndex], collapse = "+"),sep = "")))
models = lmList(formula, data = data)
class = which(classes == X[1,targetIndex])
cont = 1
probabilities = array()
for(model in models){
probabilities[cont] = dnorm(X[1,i],X[1,i]*model$coefficients[[2]] + model$coefficients[[1]], sd(model$residuals))
cont = cont + 1
}
prob = array()
prob = probabilities/sum(probabilities)
cat("i:", i, "j:", j, "\n")
cat("Probabilidades: ")
print(prob)
index = which.max(x = prob)
i_ = 1
for(model in models){
if(i_ == index){
weight = abs(X[1,j] - (model$coefficients[[2]]*X[1,i]) + model$coefficients[[1]])
}
i_ = i_+1
}
cat("Indice mayor: ", index, "\n", "weight: ", weight, "classes[ind]:", classes[index], "\n")
adyMatrix[i,j] = weight
adyMatrix[j,i] = weight
}
}
}
}
return(adyMatrix)
}
drawParenclitsNetworks = function(data, target, observation){
ady = getParenclitsNetworks(data, target, observation)
network = graph.adjacency(ady, weighted=T, mode = "undirected")
c_scale = colorRamp(c('green','red'))
x = E(network)$weight
x_ = (x-min(x))/(max(x) - min(x))
p=plot(network, edge.color=apply(c_scale(x_), 1, function(x) rgb(x[1]/255,x[2]/255,x[3]/255)),
edge.width=E(network)$weight,
vertex.label.color = "black",
vertex.color = "white",
vertex.size=25*degree(network),
layout=layout.fruchterman.reingold)
return(p)
}
a = getParenclitsNetworks(iris, "Species", 1)
a
a = drawParenclitsNetworks(iris, "Species", 1)
source("scripts/setTargetVariable.R")
require('lme4')
require("igraph")
getParenclitsNetworks = function(data, target, observation){
targetIndex = setTargetVariable(data, target)
adyMatrix = NULL
if(targetIndex != -1){
cols = colnames(data)
classes = unique(data[,targetIndex])
print(classes)
columnsLength = length(cols)
X = data[observation,]
data = data[setdiff(1:dim(data)[1], observation),]
adyMatrix = matrix(rep(0,(nrow = columnsLength -1)^2), nrow = columnsLength -1, ncol = columnsLength-1)
columns = setdiff(1:columnsLength, c(targetIndex))
colnames(adyMatrix) = colnames(data)[columns]
rownames(adyMatrix) = colnames(data)[columns]
print(columns)
for(i in 1:length(columns)){
for(j in 1:length(columns)){
if(i<j){
formula = as.formula(paste(colnames(data)[j], "~",
paste(colnames(data)[i], "|", paste(colnames(data)[targetIndex], collapse = "+"),sep = "")))
models = lmList(formula, data = data)
class = which(classes == X[1,targetIndex])
cont = 1
probabilities = array()
for(model in models){
probabilities[cont] = dnorm(X[1,i],X[1,i]*model$coefficients[[2]] + model$coefficients[[1]], sd(model$residuals))
cont = cont + 1
}
prob = array()
prob = probabilities/sum(probabilities)
cat("i:", i, "j:", j, "\n")
cat("Probabilidades: ")
print(prob)
index = which.max(x = prob)
i_ = 1
for(model in models){
if(i_ == index){
weight = abs(X[1,j] - (model$coefficients[[2]]*X[1,i]) + model$coefficients[[1]])
}
i_ = i_+1
}
cat("Indice mayor: ", index, "\n", "weight: ", weight, "classes[ind]:", classes[index], "\n")
adyMatrix[i,j] = weight
adyMatrix[j,i] = weight
}
}
}
}
return(adyMatrix)
}
drawParenclitsNetworks = function(data, target, observation){
ady = getParenclitsNetworks(data, target, observation)
network = graph.adjacency(ady, weighted=T, mode = "undirected")
c_scale = colorRamp(c('green','red'))
x = E(network)$weight
x_ = (x-min(x))/(max(x) - min(x))
p=plot(network, edge.color=apply(c_scale(x_), 1, function(x) rgb(x[1]/255,x[2]/255,x[3]/255)),
edge.width=10*E(network)$weight,
vertex.label.color = "black",
vertex.color = "white",
vertex.size=25*degree(network),
layout=layout.fruchterman.reingold)
return(p)
}
a = drawParenclitsNetworks(iris, "Species", 1)
source("scripts/setTargetVariable.R")
require('lme4')
require("igraph")
getParenclitsNetworks = function(data, target, observation){
targetIndex = setTargetVariable(data, target)
adyMatrix = NULL
if(targetIndex != -1){
cols = colnames(data)
classes = unique(data[,targetIndex])
print(classes)
columnsLength = length(cols)
X = data[observation,]
data = data[setdiff(1:dim(data)[1], observation),]
adyMatrix = matrix(rep(0,(nrow = columnsLength -1)^2), nrow = columnsLength -1, ncol = columnsLength-1)
columns = setdiff(1:columnsLength, c(targetIndex))
colnames(adyMatrix) = colnames(data)[columns]
rownames(adyMatrix) = colnames(data)[columns]
print(columns)
for(i in 1:length(columns)){
for(j in 1:length(columns)){
if(i<j){
formula = as.formula(paste(colnames(data)[j], "~",
paste(colnames(data)[i], "|", paste(colnames(data)[targetIndex], collapse = "+"),sep = "")))
models = lmList(formula, data = data)
class = which(classes == X[1,targetIndex])
cont = 1
probabilities = array()
for(model in models){
probabilities[cont] = dnorm(X[1,i],X[1,i]*model$coefficients[[2]] + model$coefficients[[1]], sd(model$residuals))
cont = cont + 1
}
prob = array()
prob = probabilities/sum(probabilities)
cat("i:", i, "j:", j, "\n")
cat("Probabilidades: ")
print(prob)
index = which.max(x = prob)
i_ = 1
for(model in models){
if(i_ == index){
weight = abs(X[1,j] - (model$coefficients[[2]]*X[1,i]) + model$coefficients[[1]])
}
i_ = i_+1
}
cat("Indice mayor: ", index, "\n", "weight: ", weight, "classes[ind]:", classes[index], "\n")
adyMatrix[i,j] = weight
adyMatrix[j,i] = weight
}
}
}
}
return(adyMatrix)
}
drawParenclitsNetworks = function(data, target, observation){
ady = getParenclitsNetworks(data, target, observation)
network = graph.adjacency(ady, weighted=T, mode = "undirected")
c_scale = colorRamp(c('green','red'))
x = E(network)$weight
x_ = (x-min(x))/(max(x) - min(x))
p=plot(network, edge.color=apply(c_scale(x_), 1, function(x) rgb(x[1]/255,x[2]/255,x[3]/255)),
edge.width=2*E(network)$weight,
vertex.label.color = "black",
vertex.color = "white",
vertex.size=25*degree(network),
layout=layout.fruchterman.reingold)
return(p)
}
a = drawParenclitsNetworks(iris, "Species", 1)
a
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
a = drawNormalPlot(iris, "Species", "Petal.Length", "Sepal.Length", 1)
a
shiny::runApp('ParencliticsNetworks')
f = file.choose()
data = read.csv(file, header = TRUE, sep = ",")
data = read.csv(f, header = TRUE, sep = ",")
data
a = drawNormalPlot(data, "class", "Petal.Length", "Sepal.Length", 1)
colnames(data)
a = drawNormalPlot(data, "class", "sepal_length", "petal_width", 1)
a
cols = colnames(data)
cols
cols = cols[-c(1,2)]
cols
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
file = file.choose()
file = file.choose()
file
data = read.csv(file, header = TRUE)
data
View(data)
data = read.csv(file, header = TRUE)
data$spam
spam_indexes = which(data$spam == 1)
data[,spam_indexes] = "yes"
data = read.csv(file, header = TRUE)
data$spam = data$spam[spam_indexes]
data$spam[spam_indexes] = "yes"
spam_indexes = which(data$spam == 0)
data$spam[spam_indexes] = "no"
data$spam
as.fector(data$spam)
as.factor(data$spam)
write.csv(x = data, file = "spam.csv", colrows = FALSE)
write.csv(x = data, file = "spam.csv", colrow = FALSE)
write.csv(x = data, file = "spam.csv", rownames = FALSE)
write.csv(x = data, file = "spam.csv")
write.csv(x = data, file = "spam.csv", col.names=NA)
write.csv(x = data, file = "spam.csv", row.names=NA)
write.csv(x = data, file = "spam.csv", row.names=FALSE)
shiny::runApp('ParencliticsNetworks')
file = file.choose()
data = read.csv(file, header = TRUE)
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
source("scripts/setTargetVariable.R")
require('lattice')
drawRegressionLines = function(data, target){
targetIndex = setTargetVariable(data, target)
if(targetIndex != -1){
target = data[,targetIndex]
data[,targetIndex] = NULL
cols = colnames(data)
columnsLength = length(cols)
linearPlots = matrix(list(), nrow = columnsLength, ncol = columnsLength)
for(i in 1:columnsLength){
for(j in 1:columnsLength){
linearPlots[[i, j]] = xyplot(
data[,i]  ~ data[,j],
groups = target,
data = data,
panel = function(x, y, ...) {
panel.superpose(x, y, ...,
panel.groups = function(x,y, col, col.symbol, ...) {
panel.xyplot(x, y, col=col.symbol, ...)
fit = lm(y~x)
panel.lines(sort(x), fitted(fit)[order(x)], col.line=col.symbol)
}
)
},
auto.key = list(columns = nlevels(target)),
xlab = cols[i],
ylab = cols[j]
)
}
}
}
return(linearPlots)
}
a = drawRegressionLines(data, "spam")
source("scripts/setTargetVariable.R")
require('lattice')
drawRegressionLines = function(data, target, i, j){
targetIndex = setTargetVariable(data, target)
if(targetIndex != -1){
target = data[,targetIndex]
data[,targetIndex] = NULL
cols = colnames(data)
columnsLength = length(cols)
linearPlots = matrix(list(), nrow = columnsLength, ncol = columnsLength)
#for(i in 1:columnsLength){
#for(j in 1:columnsLength){
linearPlots[[i, j]] = xyplot(
data[,i]  ~ data[,j],
groups = target,
data = data,
panel = function(x, y, ...) {
panel.superpose(x, y, ...,
panel.groups = function(x,y, col, col.symbol, ...) {
panel.xyplot(x, y, col=col.symbol, ...)
fit = lm(y~x)
panel.lines(sort(x), fitted(fit)[order(x)], col.line=col.symbol)
}
)
},
auto.key = list(columns = nlevels(target)),
xlab = cols[i],
ylab = cols[j]
)
}
#}
#}
return(linearPlots)
}
a = drawRegressionLines(data, "spam",1,2)
a
a[[1,2]]
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
rm(data)
data
search()
rm(list = ls())
shiny::runApp('ParencliticsNetworks')
}
panel.xyplot(x, y, col=col.symbol, ...)
require('lme4')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
carat
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
runApp('ParencliticsNetworks')
runApp('ParencliticsNetworks')
percentage = params[["percentage"]]
for(type in types){
cat("## Regression method: ", type, "\n")
results = calculatePrediction(data, target, percentage, type)
pander(results[[2]], caption = paste("Classification with method", type))
}
runApp('ParencliticsNetworks')
runApp('ParencliticsNetworks')
runApp('ParencliticsNetworks')
runApp('ParencliticsNetworks')
