library(nlme)
data = file.read(file.choose())
data = file.csv(file.choose())
data = read.csv(file.choose())
lmList(data[,1]~data[,2] | data[,5], data=data)
a=lmList(data[,1]~data[,2] | data[,5], data=data)
a=lmList(data[,1]~data[,2] | data[,5])
a=lmList(data[,1]~data[,2] | data[,5], data=data)
a
attach(data)
a=lmList(sepal_length~sepal_width | class, data=data)
a
a['Iris-setosa']
a['Iris-setosa']$coefficients
b=a['Iris-setosa']
b
b[1]
b[1]
b[[1]]
b=a[[1]]
b
b=a[[2]]
b
a=lmList(data[,1]~data[,2] | data[,5], data=data)
d = data
a=lmList(data[,1]~data[,2] | data[,5], data=d)
?mlList
??mlList
library("nlme", lib.loc="/usr/lib/R/library")
detach("package:nlme", unload=TRUE)
a=lmList(data[,1]~data[,2] | data[,5], data=d)
library("nlme", lib.loc="/usr/lib/R/library")
a=lmList(data[,1]~data[,2] | data[,5], data=d)
library("nlme", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
detach("package:nlme", unload=TRUE)
library("lme4", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
detach("package:lme4", unload=TRUE)
library("nlme", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
a=lmList(data[,1]~data[,2] | data[,5], data=d)
y = data[,1]
x = data[,2]
target = data[,5]
a=lmList(y~x | target, data=data)
a
target
a=lmList(y~x | target, data=d)
a
unique(target)
d
a=lmList(d$sepal_length~d$sepal_width | d$class, data=d)
a=lmList(d$sepal_length~d$sepal_width | class, data=d)
a
a=lmList(d$sepal_length~d$sepal_width | class, data=d)
attach(d)
rm(data)
attach(d)
colnames(d)
colnames(d)[1]
d$colnames(d)[1]
d$"colnames(d)[1]"
d$"colnames(d)[1]"
with(mlList(data[,1]~data[,2]|data[,5]), d)
a=lmList(d$sepal_length~d$sepal_width | class, data=d)
a
a=with(d,lmList(d$sepal_length~d$sepal_width | class, data=d))
a
by(mydf, mydf$GRP, function(z) lm(Y ~ X, data = z))
by(d, d[,5], function(z) lm(data[,1] ~ data[,2], data = z))
by(d, d[,5], function(z) lm(d[,1] ~ d[,2], data = z))
by(d, d[,5], function(z) lm(d[,1] ~ d[,3], data = z))
by(d, d$class, function(z) lm(d$sepal_length ~ d$sepal_width, data = z))
View(d)
by(d, d$class, function(z) lm(d$sepal_length ~ d$sepal_width, data = z))
mydf <- data.frame( GRP = rep(c("A","B","C"), each=100), X = rep(1:100,3),
Y = rep(c(2,4,8),each=100) +
rep(c(4,2,1),each=100) * rep(1:100,3) + rnorm(300))
by(mydf, mydf$GRP, function(z) lm(Y ~ X, data = z))
a=by(d, d$class, function(z) lm(d$sepal_length ~ d$sepal_width, data = z))
a[[1]]
a[['Iris-setosa']]
a[['Iris-setosa']]$coefficients
a[['Iris-setosa']]$coefficients[1]
a[['Iris-setosa']]$coefficients[[1]
]
mydf <- data.frame( GRP = rep(c("A","B","C"), each=100), X = rep(1:100,3),
Y = rep(c(2,4,8),each=100) +
rep(c(4,2,1),each=100) * rep(1:100,3) + rnorm(300))
by(mydf, mydf$GRP, function(z) lm(Y ~ X, data = z))
dat = as.data.frame(d)
dat
a=by(dat, data = dat$class, function(z) lm(dat$sepal_length ~ dat$sepal_width, data = z))
a
a=by(dat, dat$class, function(z) lm(dat$sepal_length ~ dat$sepal_width, data = z))
a
a=by(dat, dat[,5], function(z) lm(dat[,1] ~ dat[,2], data = z))
a
lm(dat$sepal_length~dat$sepal_width)
d <- data.frame(
state = rep(c('NY', 'CA'), 10),
year = rep(1:10, 2),
response= rnorm(20)
)
library(plyr)
# Break up d by state, then fit the specified model to each piece and
# return a list
models <- dlply(d, "state", function(df)
lm(response ~ year, data = df))
# Apply coef to each model and return a data frame
ldply(models, coef)
# Print the summary of each model
l_ply(models, summary, .print = TRUE)
install.packages("ldply")
d <- data.frame(
state = rep(c('NY', 'CA'), 10),
year = rep(1:10, 2),
response= rnorm(20)
)
library(plyr)
# Break up d by state, then fit the specified model to each piece and
# return a list
models <- dlply(d, "state", function(df)
lm(response ~ year, data = df))
# Apply coef to each model and return a data frame
ldply(models, coef)
# Print the summary of each model
l_ply(models, summary, .print = TRUE)
modell<-by(dat, dat$class, function(data) lm(y~I(1/dat$sepal_length)+I(1/dat$sepal_width)))
model1
modell
modell<-by(dat, dat$class, function(data) lm(y~I(dat$sepal_length)+I(dat$sepal_width)))
modell
modell<-by(dat, dat$class, function(data) lm(dat$sepal_length~dat$sepal_width))
modell
modell<-by(dat, dat$class, function(data) lm(dat$sepal_length~dat$sepal_width))
?by
dat$class
nrow(dat)
modell<-by(dat, class, function(data) lm(sepal_length~sepal_width))
modell
modell<-by(dat, class, function(data) lm(sepal_length~sepal_width, data=data))
modell
modell<-by(dat, dat[,5], function(data) lm(dat[,1]~dat[,2], data=data))
modell
by(dat, dat$class, function(x){ cat("x: ", x); lm(dat[,1]~dat[,2]) })
by(dat, dat$class, function(x){ cat("x: ", x); lm(dat[,1]~dat[,2]); })
by(dat, dat$class, function(x){ x lm(dat[,1]~dat[,2]) })
by(dat, dat$class, function(x){ x; lm(dat[,1]~dat[,2]) })
x=by(dat, dat$class, function(x){})
x
x=by(dat, dat$class, function(x){lm(dat$sepal_width~dat$sepal_width)})
x=by(dat, dat$class, function(x){lm(dat$sepal_width~dat$sepal_width, data=x)})
x=by(dat, dat$class, function(x){lm(dat$sepal_width~dat$sepal_length, data=x)})
x
x=lm(dat$sepal_width~dat$sepal_length, data=x)
x=lm(dat$sepal_width~dat$sepal_length)
x
dat[,list(intercept=coef(lm(dat[,1]~data[,2]))[1], coef=coef(lm(dat[,1]~dat[,3]))[2]),by=dat[,3]]
dat[,list(intercept=coef(lm(dat[,1]~data[,2]))[1], coef=coef(lm(dat[,1]~dat[,3]))[2]),by=dat[,5]]
dat[,5]
dat[,list(intercept=coef(lm(dat[,1]~data[,2]))[1], coef=coef(lm(dat[,1]~dat[,3]))[2]),by=dat[,5]]
dat2=as.table(dat)
dat[,list(intercept=coef(lm(dat$sepal_length~dat$sepal_width))[1], coef=coef(lm(dat$sepal_length~dat$sepal_width))[2]),by=dat$class]
as.table.matrix(dat)
as.table(dat)
dat=read.table(file.choose())
dat=read.table(file.choose(), sep=",")
View(dat)
dat=read.table(file.choose(), sep=",", header=TRUE)
dat[,list(intercept=coef(lm(dat$sepal_length~dat$sepal_width))[1], coef=coef(lm(dat$sepal_length~dat$sepal_width))[2]),by=dat$class]
attach(dat)
dat[,list(intercept=coef(lm(dat$sepal_length~dat$sepal_width))[1], coef=coef(lm(dat$sepal_length~dat$sepal_width))[2]),by=dat$class]
dat[,summary(lm("sepal_width"~"sepal_width"))$r.squared,by=class]
by(dat, dat$class, function(x){ lm(dat[,1]~dat[,2], data=x)})
lm(dat[,1]~dat[,2])
install.packages("plyr")
install.packages("plyr")
install.packages("~/Descargas/plyr_1.8.tar.gz", repos = NULL, type = "source")
library("plyr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
models <- dlply(d, "state", function(df)
lm(response ~ year, data = df))
models <- dlply(dat, "class", function(df)
lm(data[,1] ~ data[,2], data = df))
models <- dlply(dat, dat[,5], function(df)
lm(data[,1] ~ data[,2], data = df))
by(dat, dat$class, function(x){ lm(dat[,1]~dat[,2], data=x)})
by(dat, colnames(dat)[5], function(x){ lm(colnames(data)[1]~colnames(data)[2], data=x)})
colnames(dat)[5]
target = colnames(dat)[5]
target
formula = cat(colnames(dat)[1], "~", colnames(dat)[2])
by(dat, target, function(x){ formula, data=x)})
by(dat, target, function(x){ lm(formula, data=x)})
by(dat, dat[,5], function(x){ lm(formula, data=x)})
by(dat, dat$class, function(x){ lm(formula, data=x)})
by(dat, dat$class, function(x){ lm(formula, data=x)})
class
formula = paste(colnames(dat)[1], "~", colnames(dat)[2])
formula
by(dat, dat$class, function(x){ lm(formula, data=x)})
by(dat, class, function(x){ lm(formula, data=x)})
by(dat, target, function(x){ lm(formula, data=x)})
by(dat, target, function(x){ lm(formula, data=x)})
target
target = paste(data[,5])
target = paste(colnames(dat)[5])
by(dat, target, function(x){ lm(formula, data=x)})
target = paste("data$",colnames(dat)[5])
target
by(dat, target, function(x){ lm(formula, data=x)})
by(dat, target, function(x){ lm(formula, data=x)})
source("setTargetVariable.R")
library(nlme)
regressionLine = function(data, target){
targetIndex = setTargetVariable(data, target)
if(targetIndex != -1){
target = data[,targetIndex]
data[,targetIndex] = NULL
cols = colnames(data)
columnsLength = length(cols)
linearModels = matrix(list(), nrow = columnsLength, ncol = columnsLength)
for(i in 1:columnsLength){
for(j in 1:columnsLength){
if(i < j){
formula = paste(colnames(i), "~", colnames(j))
linearModels[[i, j]] = by(dat, target, function(x){ lm(formula, data=x)})
}
}
}
}
return(linearModels)
}
regressionLine(dat, "class")
source("setTargetVariable.R")
regressionLine = function(data, target){
targetIndex = setTargetVariable(data, target)
if(targetIndex != -1){
target = data[,targetIndex]
data[,targetIndex] = NULL
cols = colnames(data)
columnsLength = length(cols)
linearModels = matrix(list(), nrow = columnsLength, ncol = columnsLength)
for(i in 1:columnsLength){
for(j in 1:columnsLength){
if(i < j){
formula = paste(colnames(i), "~", colnames(j))
linearModels[[i, j]] = by(data, target, function(x){ lm(formula, data=x)})
}
}
}
}
return(linearModels)
}
regressionLine(dat, "class")
source("setTargetVariable.R")
regressionLine = function(data, target){
targetIndex = setTargetVariable(data, target)
if(targetIndex != -1){
target = data[,targetIndex]
data[,targetIndex] = NULL
cols = colnames(data)
columnsLength = length(cols)
linearModels = matrix(list(), nrow = columnsLength, ncol = columnsLength)
for(i in 1:columnsLength){
for(j in 1:columnsLength){
if(i < j){
formula = paste(colnames(data)[i], "~", colnames(data)[j])
linearModels[[i, j]] = by(data, target, function(x){ lm(formula, data=x)})
}
}
}
}
return(linearModels)
}
regressionLine(dat, "class")
lines = regressionLine(dat, "class")
lines[[1,2]]
lines[[1,2]]['Virginica']
a = lines[[1,2]]
a['Iris-setosa']
a[['Iris-setosa']]$coefficients
a[['Iris-setosa']]$coefficients[[1]]
a[['Iris-setosa']]$coefficients[[2]]
lines[[1,2]]['Iris-versicolor']
lines[[1,2]][['Iris-versicolor']]
lines[[1,2]][['Iris-versicolor']]$coefficients
drawRegressionLines(dat, "class")
source("setTargetVariable.R")
require('lattice')
drawRegressionLines = function(data, target){
targetIndex = setTargetVariable(data, target)
if(targetIndex != -1){
target = data[,targetIndex]
data[,targetIndex] = NULL
cols = colnames(data)
columnsLength = length(cols)
linearPlots = matrix(list(), nrow = columnsLength, ncol = columnsLength)
for(i in 1:columnsLength){
for(j in 1:columnsLength){
if(i < j){
linearPlots[[i, j]] = xyplot(data[,i] ~ data[,j], data, groups = target, pch = 20, type=c("p","r"), lwd = 4, group = target, auto.key = list(columns = nlevels(target)), xlab = cols[i], ylab = cols[j])
}
}
}
}
return(linearPlots)
}
drawRegressionLines(dat, "class")
a=drawRegressionLines(dat, "class")
print(a[1,2])
version
shiny::runApp('ParencliticsNetworks')
install.packages(DT)
install.packages("DT")
runApp('ParencliticsNetworks')
runApp('ParencliticsNetworks')
runApp('ParencliticsNetworks')
runApp('ParencliticsNetworks')
runApp('ParencliticsNetworks')
runApp('ParencliticsNetworks')
runApp('ParencliticsNetworks')
runApp('ParencliticsNetworks')
runApp('ParencliticsNetworks')
sapply(iris, class)
sapply(iris, class)
getFactorVariables =  function(data){
which(sapply(iris, class) == "factor")
}
getFactorVariables =  function(data){
which(sapply(iris, class) == "factor")
}
getFactorVariables =  function(data){
return(which(sapply(iris, class) == "factor"))
}
getFactorVariables(iris)
getFactorVariables(iris)[1]
getFactorVariables(iris)[[1]]
colnames(iris)
colnames(iris)[c(1,23)]
colnames(iris)[c(1,2,3)]
getFactorVariables =  function(data){
indexes = which(sapply(iris, class) == "factor")[[1]]
return(colnames()[indexes])
}
getFactorVariables(iris)
getFactorVariables =  function(data){
indexes = which(sapply(iris, class) == "factor")[[1]]
return(colnames(data)[indexes])
}
getFactorVariables(iris)
runApp('ParencliticsNetworks')
runApp('ParencliticsNetworks')
library(shiny)
