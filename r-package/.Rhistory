class = which(classes == X[1,targetIndex])
cont = 1
probabilities = array()
for(model in models){
probabilities[cont] = dnorm(X[1,i],X[1,i]*model$coefficients[2], sd(model$residuals))
cont = cont + 1
}
prob = array()
prob = probabilities/sum(probabilities)
cat("i:", i, "j:", j, "\n")
cat("Probabilidades: ")
print(prob)
index = which.max(x = prob)
i_ = 1
for(model in models){
if(i_ == index){
weight = abs(X[1,i] - model$coefficients[[2]]*X[1,i])
}
i_ = i_+1
}
cat("Indice mayor: ", index, "\n", "weight: ", weight, "classes[ind]:", classes[index], "\n")
adyMatrix[i,j] = weight
}
}
}
}
return(adyMatrix)
}
a
a = drawParenclitsNetworks(iris, "Species", 2)
source("scripts/setTargetVariable.R")
require('lme4')
drawParenclitsNetworks = function(data, target, observation){
targetIndex = setTargetVariable(data, target)
adyMatrix = NULL
if(targetIndex != -1){
cols = colnames(data)
classes = unique(data[,targetIndex])
print(classes)
columnsLength = length(cols)
X = data[observation,]
data[-observation,]
adyMatrix = matrix(, nrow = columnsLength -1, ncol = columnsLength-1)
columns = setdiff(1:columnsLength, c(targetIndex))
print(colnames(data)[,columns])
#colnames(adyMatrix) = colnames(data)[,columns]
#rownames(adyMatrix) = colnames(data)[,columns]
print(columns)
for(i in 1:length(columns)){
for(j in 1:length(columns)){
if(i<j){
formula = as.formula(paste(colnames(data)[j], "~",
paste(colnames(data)[i], "|", paste(colnames(data)[targetIndex], collapse = "+"),sep = "")))
models = lmList(formula, data = data)
class = which(classes == X[1,targetIndex])
cont = 1
probabilities = array()
for(model in models){
probabilities[cont] = dnorm(X[1,i],X[1,i]*model$coefficients[[2]], sd(model$residuals))
cont = cont + 1
}
prob = array()
prob = probabilities/sum(probabilities)
cat("i:", i, "j:", j, "\n")
cat("Probabilidades: ")
print(prob)
index = which.max(x = prob)
i_ = 1
for(model in models){
if(i_ == index){
weight = abs(X[1,i] - model$coefficients[[2]]*X[1,i])
}
i_ = i_+1
}
cat("Indice mayor: ", index, "\n", "weight: ", weight, "classes[ind]:", classes[index], "\n")
adyMatrix[i,j] = weight
}
}
}
}
return(adyMatrix)
}
a = drawParenclitsNetworks(iris, "Species", 2)
columns = 1:4
columns
colnames(iris)[,columns]
colnames(iris)[,columns]
colnames(iris)
colnames(iris)[columns]
source("scripts/setTargetVariable.R")
require('lme4')
drawParenclitsNetworks = function(data, target, observation){
targetIndex = setTargetVariable(data, target)
adyMatrix = NULL
if(targetIndex != -1){
cols = colnames(data)
classes = unique(data[,targetIndex])
print(classes)
columnsLength = length(cols)
X = data[observation,]
data[-observation,]
adyMatrix = matrix(, nrow = columnsLength -1, ncol = columnsLength-1)
columns = setdiff(1:columnsLength, c(targetIndex))
colnames(adyMatrix) = colnames(data)[columns]
rownames(adyMatrix) = colnames(data)[columns]
print(columns)
for(i in 1:length(columns)){
for(j in 1:length(columns)){
if(i<j){
formula = as.formula(paste(colnames(data)[j], "~",
paste(colnames(data)[i], "|", paste(colnames(data)[targetIndex], collapse = "+"),sep = "")))
models = lmList(formula, data = data)
class = which(classes == X[1,targetIndex])
cont = 1
probabilities = array()
for(model in models){
probabilities[cont] = dnorm(X[1,i],X[1,i]*model$coefficients[[2]], sd(model$residuals))
cont = cont + 1
}
prob = array()
prob = probabilities/sum(probabilities)
cat("i:", i, "j:", j, "\n")
cat("Probabilidades: ")
print(prob)
index = which.max(x = prob)
i_ = 1
for(model in models){
if(i_ == index){
weight = abs(X[1,i] - model$coefficients[[2]]*X[1,i])
}
i_ = i_+1
}
cat("Indice mayor: ", index, "\n", "weight: ", weight, "classes[ind]:", classes[index], "\n")
adyMatrix[i,j] = weight
}
}
}
}
return(adyMatrix)
}
colnames(iris)[columns]
a = drawParenclitsNetworks(iris, "Species", 2)
a
source("scripts/setTargetVariable.R")
require('lme4')
drawParenclitsNetworks = function(data, target, observation){
targetIndex = setTargetVariable(data, target)
adyMatrix = NULL
if(targetIndex != -1){
cols = colnames(data)
classes = unique(data[,targetIndex])
print(classes)
columnsLength = length(cols)
X = data[observation,]
data[-observation,]
adyMatrix = matrix(, nrow = columnsLength -1, ncol = columnsLength-1)
columns = setdiff(1:columnsLength, c(targetIndex))
colnames(adyMatrix) = colnames(data)[columns]
rownames(adyMatrix) = colnames(data)[columns]
print(columns)
for(i in 1:length(columns)){
for(j in 1:length(columns)){
if(i<j){
formula = as.formula(paste(colnames(data)[j], "~",
paste(colnames(data)[i], "|", paste(colnames(data)[targetIndex], collapse = "+"),sep = "")))
models = lmList(formula, data = data)
class = which(classes == X[1,targetIndex])
cont = 1
probabilities = array()
for(model in models){
probabilities[cont] = dnorm(X[1,i],X[1,i]*model$coefficients[[2]], sd(model$residuals))
cont = cont + 1
}
prob = array()
prob = probabilities/sum(probabilities)
cat("i:", i, "j:", j, "\n")
cat("Probabilidades: ")
print(prob)
index = which.max(x = prob)
i_ = 1
for(model in models){
if(i_ == index){
weight = abs(X[1,i] - model$coefficients[[2]]*X[1,i])
}
i_ = i_+1
}
cat("Indice mayor: ", index, "\n", "weight: ", weight, "classes[ind]:", classes[index], "\n")
adyMatrix[i,j] = weight
adyMatrix[j,i] = weight
}
}
}
}
return(adyMatrix)
}
source("scripts/setTargetVariable.R")
require('lme4')
drawParenclitsNetworks = function(data, target, observation){
targetIndex = setTargetVariable(data, target)
adyMatrix = NULL
if(targetIndex != -1){
cols = colnames(data)
classes = unique(data[,targetIndex])
print(classes)
columnsLength = length(cols)
X = data[observation,]
data[-observation,]
adyMatrix = matrix(rep(0,(nrow = columnsLength -1)^2), nrow = columnsLength -1, ncol = columnsLength-1)
columns = setdiff(1:columnsLength, c(targetIndex))
colnames(adyMatrix) = colnames(data)[columns]
rownames(adyMatrix) = colnames(data)[columns]
print(columns)
for(i in 1:length(columns)){
for(j in 1:length(columns)){
if(i<j){
formula = as.formula(paste(colnames(data)[j], "~",
paste(colnames(data)[i], "|", paste(colnames(data)[targetIndex], collapse = "+"),sep = "")))
models = lmList(formula, data = data)
class = which(classes == X[1,targetIndex])
cont = 1
probabilities = array()
for(model in models){
probabilities[cont] = dnorm(X[1,i],X[1,i]*model$coefficients[[2]], sd(model$residuals))
cont = cont + 1
}
prob = array()
prob = probabilities/sum(probabilities)
cat("i:", i, "j:", j, "\n")
cat("Probabilidades: ")
print(prob)
index = which.max(x = prob)
i_ = 1
for(model in models){
if(i_ == index){
weight = abs(X[1,i] - model$coefficients[[2]]*X[1,i])
}
i_ = i_+1
}
cat("Indice mayor: ", index, "\n", "weight: ", weight, "classes[ind]:", classes[index], "\n")
adyMatrix[i,j] = weight
adyMatrix[j,i] = weight
}
}
}
}
return(adyMatrix + diag())
}
source("scripts/setTargetVariable.R")
require('lme4')
drawParenclitsNetworks = function(data, target, observation){
targetIndex = setTargetVariable(data, target)
adyMatrix = NULL
if(targetIndex != -1){
cols = colnames(data)
classes = unique(data[,targetIndex])
print(classes)
columnsLength = length(cols)
X = data[observation,]
data[-observation,]
adyMatrix = matrix(rep(0,(nrow = columnsLength -1)^2), nrow = columnsLength -1, ncol = columnsLength-1)
columns = setdiff(1:columnsLength, c(targetIndex))
colnames(adyMatrix) = colnames(data)[columns]
rownames(adyMatrix) = colnames(data)[columns]
print(columns)
for(i in 1:length(columns)){
for(j in 1:length(columns)){
if(i<j){
formula = as.formula(paste(colnames(data)[j], "~",
paste(colnames(data)[i], "|", paste(colnames(data)[targetIndex], collapse = "+"),sep = "")))
models = lmList(formula, data = data)
class = which(classes == X[1,targetIndex])
cont = 1
probabilities = array()
for(model in models){
probabilities[cont] = dnorm(X[1,i],X[1,i]*model$coefficients[[2]], sd(model$residuals))
cont = cont + 1
}
prob = array()
prob = probabilities/sum(probabilities)
cat("i:", i, "j:", j, "\n")
cat("Probabilidades: ")
print(prob)
index = which.max(x = prob)
i_ = 1
for(model in models){
if(i_ == index){
weight = abs(X[1,i] - model$coefficients[[2]]*X[1,i])
}
i_ = i_+1
}
cat("Indice mayor: ", index, "\n", "weight: ", weight, "classes[ind]:", classes[index], "\n")
adyMatrix[i,j] = weight
adyMatrix[j,i] = weight
}
}
}
}
return(adyMatrix)
}
a = drawParenclitsNetworks(iris, "Species", 2)
a
install.packages("igraph")
## Load package
library(igraph)
library(igraph)
g <- graph.adjacency(termMatrix, weighted=T, mode = "undirected")
g <- graph.adjacency(adyMatrix, weighted=T, mode = "undirected")
g <- graph.adjacency(a, weighted=T, mode = "undirected")
g
plot(g)
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
x = c(1,2,3)
y = x
data = cbind(x,y)
data
data[!2,]
data
data = data[!2,]
data
data = data[-2,]
data
data = cbind(x,y)
data[-2,]
rownames()
rownames(data)
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
g <- graph.adjacency(adyMatrix, weighted=T, mode = "undirected", edge.color="black",edge.width=E(net)$weight)
g <- graph.adjacency(adyMatrix, weighted=T, mode = "undirected")
g <- graph.adjacency(a, weighted=T, mode = "undirected")
g <- graph.adjacency(a, weighted=T, mode = "undirected")
source("scripts/setTargetVariable.R")
require('lme4')
require("igraph")
getParenclitsNetworks = function(data, target, observation){
targetIndex = setTargetVariable(data, target)
adyMatrix = NULL
if(targetIndex != -1){
cols = colnames(data)
classes = unique(data[,targetIndex])
print(classes)
columnsLength = length(cols)
X = data[observation,]
#data[-observation,]
adyMatrix = matrix(rep(0,(nrow = columnsLength -1)^2), nrow = columnsLength -1, ncol = columnsLength-1)
columns = setdiff(1:columnsLength, c(targetIndex))
colnames(adyMatrix) = colnames(data)[columns]
rownames(adyMatrix) = colnames(data)[columns]
print(columns)
for(i in 1:length(columns)){
for(j in 1:length(columns)){
if(i<j){
formula = as.formula(paste(colnames(data)[j], "~",
paste(colnames(data)[i], "|", paste(colnames(data)[targetIndex], collapse = "+"),sep = "")))
models = lmList(formula, data = data)
class = which(classes == X[1,targetIndex])
cont = 1
probabilities = array()
for(model in models){
probabilities[cont] = dnorm(X[1,i],X[1,i]*model$coefficients[[2]], sd(model$residuals))
cont = cont + 1
}
prob = array()
prob = probabilities/sum(probabilities)
cat("i:", i, "j:", j, "\n")
cat("Probabilidades: ")
print(prob)
index = which.max(x = prob)
i_ = 1
for(model in models){
if(i_ == index){
weight = abs(X[1,i] - model$coefficients[[2]]*X[1,i])
}
i_ = i_+1
}
cat("Indice mayor: ", index, "\n", "weight: ", weight, "classes[ind]:", classes[index], "\n")
adyMatrix[i,j] = weight
adyMatrix[j,i] = weight
}
}
}
}
return(adyMatrix)
}
drawParenclitsNetworks = function(data, target, observation){
ady = getParenclitsNetworks(data, target, observation)
network = graph.adjacency(ady, weighted=T, mode = "undirected")
plot(network, edge.color="black",edge.width=E(network)$weight)
return(network)
}
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
source("scripts/setTargetVariable.R")
require('lme4')
require("igraph")
getParenclitsNetworks = function(data, target, observation){
targetIndex = setTargetVariable(data, target)
adyMatrix = NULL
if(targetIndex != -1){
cols = colnames(data)
classes = unique(data[,targetIndex])
print(classes)
columnsLength = length(cols)
X = data[observation,]
#data[-observation,]
adyMatrix = matrix(rep(0,(nrow = columnsLength -1)^2), nrow = columnsLength -1, ncol = columnsLength-1)
columns = setdiff(1:columnsLength, c(targetIndex))
colnames(adyMatrix) = colnames(data)[columns]
rownames(adyMatrix) = colnames(data)[columns]
print(columns)
for(i in 1:length(columns)){
for(j in 1:length(columns)){
if(i<j){
formula = as.formula(paste(colnames(data)[j], "~",
paste(colnames(data)[i], "|", paste(colnames(data)[targetIndex], collapse = "+"),sep = "")))
models = lmList(formula, data = data)
class = which(classes == X[1,targetIndex])
cont = 1
probabilities = array()
for(model in models){
probabilities[cont] = dnorm(X[1,i],X[1,i]*model$coefficients[[2]], sd(model$residuals))
cont = cont + 1
}
prob = array()
prob = probabilities/sum(probabilities)
cat("i:", i, "j:", j, "\n")
cat("Probabilidades: ")
print(prob)
index = which.max(x = prob)
i_ = 1
for(model in models){
if(i_ == index){
weight = abs(X[1,i] - model$coefficients[[2]]*X[1,i])
}
i_ = i_+1
}
cat("Indice mayor: ", index, "\n", "weight: ", weight, "classes[ind]:", classes[index], "\n")
adyMatrix[i,j] = weight
adyMatrix[j,i] = weight
}
}
}
}
return(adyMatrix)
}
drawParenclitsNetworks = function(data, target, observation){
ady = getParenclitsNetworks(data, target, observation)
network = graph.adjacency(ady, weighted=T, mode = "undirected")
c_scale <- colorRamp(c('red','yellow','cyan','blue'))
p=plot(network, edge.color=apply(c_scale(E(network)$weight), 1, function(x) rgb(x[1]/255,x[2]/255,x[3]/255)),edge.width=E(network)$weight, layout=layout.fruchterman.reingold)
return(p)
}
shiny::runApp('ParencliticsNetworks')
c_scale <- colorRamp(c('red','yellow','cyan','blue'))
g
plot(g, edge.color=apply(c_scale(E(network)$weight), 1, function(x) rgb(x[1]/255,x[2]/255,x[3]/255)))
plot(g, edge.color=apply(c_scale(E(g)$weight), 1, function(x) rgb(x[1]/255,x[2]/255,x[3]/255)))
color = edge.color=apply(c_scale(E(network)$weight), 1, function(x) rgb(x[1]/255,x[2]/255,x[3]/255))
color = edge.color=apply(c_scale(E(g)$weight), 1, function(x) rgb(x[1]/255,x[2]/255,x[3]/255))
c_scale
c_scale = colorRamp(c('red','yellow','cyan','blue'))
c_scale
E(network)$weight
E(g)$weight
c_scale(E(g)$weight)
E(g)$weight
c_scale(E(g)$weight)
c_scale = colorRamp(c('red','green'))
c_scale(E(g)$weight)
colfunc <- colorRampPalette(c("black", "white"))
colfunc()
colfunc(10)
plot(rep(1,10),col=colfunc(10),pch=19,cex=3)
r = colorRamp(c(green, red))
r = colorRamp(c("green", "red"))
r
r(c(1,2,3))
r(c(1,0.1,0.3))
r(c(1,0.1,0.3,0.7))
r(c(1,0.1,0.3,0.23))
c_scale(E(g)$weight/sum(E(g)$weight)
)
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
shiny::runApp('ParencliticsNetworks')
