results_svm = as.data.frame(cbind(as.character(predicts_svm), as.character(labels_testing)))
results_svm["classification"] = ifelse(predicts_svm == labels_testing, "Good", "Bad")
colnames(results_svm) = c("predicted", "labels", "classification")
rownames(results_svm) = as.numeric(rownames(testingSet))
model_ann = nnet(formula, size = 10, data = trainingSet,trace = FALSE)
predicts_ann = unname(predict(model_ann, testingSet, type = "class"))
predict_ann = predict(model_ann, testingSet)
results_percentage_ann = sum(predicts_ann == labels_testing)/length(predicts_ann)
results_ann = as.data.frame(cbind(as.character(predicts_ann), as.character(labels_testing)))
results_ann["classification"] = ifelse(predicts_ann == labels_testing, "Good", "Bad")
colnames(results_ann) = c("predicted", "labels", "classification")
rownames(results_ann) = as.numeric(rownames(testingSet))
return(list(results_tree, results_svm, results_ann, predict_tree, predict_svm, predict_ann, labels_testing))
}
pred4  = prediction(model4[[4]][,2],model4[[7]])
pred4  = prediction(model4[[4]][,2],model4[[7]])
model4 = calculatePredictionML(cancer, "Class", 0.8)
pred4  = prediction(model4[[4]][,2],model4[[7]])
perf14  = performance(pred4,"tpr","fpr")
model4 = calculatePredictionML(cancer, "Class", 0.8)
require("rpart")
require("e1071")
require("nnet")
calculatePredictionML = function(data, target, percentage){
n = floor(nrow(data)*as.numeric(percentage)) + 1
trainingIndexes = sort(sample(1:dim(data)[1], size = n))
testingIndexes = setdiff(1:dim(data)[1], trainingIndexes)
trainingSet = data[trainingIndexes,]
testingSet  = data[-trainingIndexes,]
labels_testing = data[testingIndexes,target]
formula = as.formula(paste(target, "~", paste(".",sep = "")))
model_tree = rpart(formula, data = trainingSet)
predicts_tree = unname(predict(model_tree, testingSet, type="class"))
results_percentage_tree = sum(predicts_tree == labels_testing)/length(predicts_tree)
results_tree = as.data.frame(cbind(as.character(predicts_tree), as.character(labels_testing)))
results_tree["classification"] = ifelse(predicts_tree == labels_testing, "Good", "Bad")
colnames(results_tree) = c("predicted", "labels", "classification")
predict_tree = predict(model_tree, testingSet, type="prob")
rownames(results_tree) = as.numeric(rownames(testingSet))
model_svm = svm(formula, data = trainingSet)
predicts_svm = unname(predict(model_svm, testingSet))
predict_svm = predict(model_svm, testingSet, type)
results_percentage_svm = sum(predicts_svm == labels_testing)/length(predicts_svm)
results_svm = as.data.frame(cbind(as.character(predicts_svm), as.character(labels_testing)))
results_svm["classification"] = ifelse(predicts_svm == labels_testing, "Good", "Bad")
colnames(results_svm) = c("predicted", "labels", "classification")
rownames(results_svm) = as.numeric(rownames(testingSet))
model_ann = nnet(formula, size = 10, data = trainingSet,trace = FALSE)
predicts_ann = unname(predict(model_ann, testingSet, type = "class"))
predict_ann = predict(model_ann, testingSet)
results_percentage_ann = sum(predicts_ann == labels_testing)/length(predicts_ann)
results_ann = as.data.frame(cbind(as.character(predicts_ann), as.character(labels_testing)))
results_ann["classification"] = ifelse(predicts_ann == labels_testing, "Good", "Bad")
colnames(results_ann) = c("predicted", "labels", "classification")
rownames(results_ann) = as.numeric(rownames(testingSet))
return(list(results_tree, results_svm, results_ann, predict_tree, predict_svm, predict_ann, labels_testing))
}
model4 = calculatePredictionML(cancer, "Class", 0.8)
model4 = calculatePredictionML(cancer, "Class", 0.8)
require("rpart")
require("e1071")
require("nnet")
calculatePredictionML = function(data, target, percentage){
n = floor(nrow(data)*as.numeric(percentage)) + 1
trainingIndexes = sort(sample(1:dim(data)[1], size = n))
testingIndexes = setdiff(1:dim(data)[1], trainingIndexes)
trainingSet = data[trainingIndexes,]
testingSet  = data[-trainingIndexes,]
labels_testing = data[testingIndexes,target]
formula = as.formula(paste(target, "~", paste(".",sep = "")))
model_tree = rpart(formula, data = trainingSet)
predicts_tree = unname(predict(model_tree, testingSet, type="class"))
results_percentage_tree = sum(predicts_tree == labels_testing)/length(predicts_tree)
results_tree = as.data.frame(cbind(as.character(predicts_tree), as.character(labels_testing)))
results_tree["classification"] = ifelse(predicts_tree == labels_testing, "Good", "Bad")
colnames(results_tree) = c("predicted", "labels", "classification")
predict_tree = predict(model_tree, testingSet, type="prob")
rownames(results_tree) = as.numeric(rownames(testingSet))
model_svm = svm(formula, data = trainingSet)
predicts_svm = unname(predict(model_svm, testingSet))
predict_svm = predict(model_svm, testingSet)
results_percentage_svm = sum(predicts_svm == labels_testing)/length(predicts_svm)
results_svm = as.data.frame(cbind(as.character(predicts_svm), as.character(labels_testing)))
results_svm["classification"] = ifelse(predicts_svm == labels_testing, "Good", "Bad")
colnames(results_svm) = c("predicted", "labels", "classification")
rownames(results_svm) = as.numeric(rownames(testingSet))
model_ann = nnet(formula, size = 10, data = trainingSet,trace = FALSE)
predicts_ann = unname(predict(model_ann, testingSet, type = "class"))
predict_ann = predict(model_ann, testingSet)
results_percentage_ann = sum(predicts_ann == labels_testing)/length(predicts_ann)
results_ann = as.data.frame(cbind(as.character(predicts_ann), as.character(labels_testing)))
results_ann["classification"] = ifelse(predicts_ann == labels_testing, "Good", "Bad")
colnames(results_ann) = c("predicted", "labels", "classification")
rownames(results_ann) = as.numeric(rownames(testingSet))
return(list(results_tree, results_svm, results_ann, predict_tree, predict_svm, predict_ann, labels_testing))
}
model4 = calculatePredictionML(cancer, "Class", 0.8)
model4[[4]]
model4[[4]][,2]
pred4  = prediction(model4[[4]][,2],model4[[7]])
perf14  = performance(pred4,"tpr","fpr")
plot(perf4, add=TRUE, col = 4)
perf4  = performance(pred4,"tpr","fpr")
plot(perf4, add=TRUE, col = 4)
require("rpart")
require("e1071")
require("nnet")
calculatePredictionML = function(data, target, percentage){
n = floor(nrow(data)*as.numeric(percentage)) + 1
trainingIndexes = sort(sample(1:dim(data)[1], size = n))
testingIndexes = setdiff(1:dim(data)[1], trainingIndexes)
trainingSet = data[trainingIndexes,]
testingSet  = data[-trainingIndexes,]
labels_testing = data[testingIndexes,target]
formula = as.formula(paste(target, "~", paste(".",sep = "")))
model_tree = rpart(formula, data = trainingSet)
predicts_tree = unname(predict(model_tree, testingSet, type="class"))
results_percentage_tree = sum(predicts_tree == labels_testing)/length(predicts_tree)
results_tree = as.data.frame(cbind(as.character(predicts_tree), as.character(labels_testing)))
results_tree["classification"] = ifelse(predicts_tree == labels_testing, "Good", "Bad")
colnames(results_tree) = c("predicted", "labels", "classification")
predict_tree = predict(model_tree, testingSet, type="prob")
rownames(results_tree) = as.numeric(rownames(testingSet))
model_svm = svm(formula, data = trainingSet)
predicts_svm = unname(predict(model_svm, testingSet))
predict_svm = predict(model_svm, testingSet, type="prob")
results_percentage_svm = sum(predicts_svm == labels_testing)/length(predicts_svm)
results_svm = as.data.frame(cbind(as.character(predicts_svm), as.character(labels_testing)))
results_svm["classification"] = ifelse(predicts_svm == labels_testing, "Good", "Bad")
colnames(results_svm) = c("predicted", "labels", "classification")
rownames(results_svm) = as.numeric(rownames(testingSet))
model_ann = nnet(formula, size = 10, data = trainingSet,trace = FALSE)
predicts_ann = unname(predict(model_ann, testingSet, type = "class"))
predict_ann = predict(model_ann, testingSet)
results_percentage_ann = sum(predicts_ann == labels_testing)/length(predicts_ann)
results_ann = as.data.frame(cbind(as.character(predicts_ann), as.character(labels_testing)))
results_ann["classification"] = ifelse(predicts_ann == labels_testing, "Good", "Bad")
colnames(results_ann) = c("predicted", "labels", "classification")
rownames(results_ann) = as.numeric(rownames(testingSet))
return(list(results_tree, results_svm, results_ann, predict_tree, predict_svm, predict_ann, labels_testing))
}
model4 = calculatePredictionML(cancer, "Class", 0.8)
pred5  = prediction(model4[[5]],model4[[7]])
model[[5]]
model4[[5]]
require("rpart")
require("e1071")
require("nnet")
calculatePredictionML = function(data, target, percentage){
n = floor(nrow(data)*as.numeric(percentage)) + 1
trainingIndexes = sort(sample(1:dim(data)[1], size = n))
testingIndexes = setdiff(1:dim(data)[1], trainingIndexes)
trainingSet = data[trainingIndexes,]
testingSet  = data[-trainingIndexes,]
labels_testing = data[testingIndexes,target]
formula = as.formula(paste(target, "~", paste(".",sep = "")))
model_tree = rpart(formula, data = trainingSet)
predicts_tree = unname(predict(model_tree, testingSet, type="class"))
results_percentage_tree = sum(predicts_tree == labels_testing)/length(predicts_tree)
results_tree = as.data.frame(cbind(as.character(predicts_tree), as.character(labels_testing)))
results_tree["classification"] = ifelse(predicts_tree == labels_testing, "Good", "Bad")
colnames(results_tree) = c("predicted", "labels", "classification")
predict_tree = predict(model_tree, testingSet, type="prob")
rownames(results_tree) = as.numeric(rownames(testingSet))
model_svm = svm(formula, data = trainingSet)
predicts_svm = unname(predict(model_svm, testingSet))
predict_svm = predict(model_svm, testingSet, type="prob")
results_percentage_svm = sum(predicts_svm == labels_testing)/length(predicts_svm)
results_svm = as.data.frame(cbind(as.character(predicts_svm), as.character(labels_testing)))
results_svm["classification"] = ifelse(predicts_svm == labels_testing, "Good", "Bad")
colnames(results_svm) = c("predicted", "labels", "classification")
rownames(results_svm) = as.numeric(rownames(testingSet))
model_ann = nnet(formula, size = 10, data = trainingSet,trace = FALSE)
predicts_ann = unname(predict(model_ann, testingSet, type = "class"))
predict_ann = predict(model_ann, testingSet)
results_percentage_ann = sum(predicts_ann == labels_testing)/length(predicts_ann)
results_ann = as.data.frame(cbind(as.character(predicts_ann), as.character(labels_testing)))
results_ann["classification"] = ifelse(predicts_ann == labels_testing, "Good", "Bad")
colnames(results_ann) = c("predicted", "labels", "classification")
rownames(results_ann) = as.numeric(rownames(testingSet))
return(list(results_tree, results_svm, results_ann, predict_tree, predict_svm, predict_ann, labels_testing))
}
model4 = calculatePredictionML(cancer, "Class", 0.8)
model4
require("rpart")
require("e1071")
require("nnet")
calculatePredictionML = function(data, target, percentage){
n = floor(nrow(data)*as.numeric(percentage)) + 1
trainingIndexes = sort(sample(1:dim(data)[1], size = n))
testingIndexes = setdiff(1:dim(data)[1], trainingIndexes)
trainingSet = data[trainingIndexes,]
testingSet  = data[-trainingIndexes,]
labels_testing = data[testingIndexes,target]
formula = as.formula(paste(target, "~", paste(".",sep = "")))
model_tree = rpart(formula, data = trainingSet)
predicts_tree = unname(predict(model_tree, testingSet, type="class"))
results_percentage_tree = sum(predicts_tree == labels_testing)/length(predicts_tree)
results_tree = as.data.frame(cbind(as.character(predicts_tree), as.character(labels_testing)))
results_tree["classification"] = ifelse(predicts_tree == labels_testing, "Good", "Bad")
colnames(results_tree) = c("predicted", "labels", "classification")
predict_tree = predict(model_tree, testingSet, type="prob")
rownames(results_tree) = as.numeric(rownames(testingSet))
model_svm = svm(formula, data = trainingSet)
predicts_svm = unname(predict(model_svm, testingSet))
predict_svm = predict(model_svm, testingSet, type="prob", probability = TRUE)
results_percentage_svm = sum(predicts_svm == labels_testing)/length(predicts_svm)
results_svm = as.data.frame(cbind(as.character(predicts_svm), as.character(labels_testing)))
results_svm["classification"] = ifelse(predicts_svm == labels_testing, "Good", "Bad")
colnames(results_svm) = c("predicted", "labels", "classification")
rownames(results_svm) = as.numeric(rownames(testingSet))
model_ann = nnet(formula, size = 10, data = trainingSet,trace = FALSE)
predicts_ann = unname(predict(model_ann, testingSet, type = "class"))
predict_ann = predict(model_ann, testingSet)
results_percentage_ann = sum(predicts_ann == labels_testing)/length(predicts_ann)
results_ann = as.data.frame(cbind(as.character(predicts_ann), as.character(labels_testing)))
results_ann["classification"] = ifelse(predicts_ann == labels_testing, "Good", "Bad")
colnames(results_ann) = c("predicted", "labels", "classification")
rownames(results_ann) = as.numeric(rownames(testingSet))
return(list(results_tree, results_svm, results_ann, predict_tree, predict_svm, predict_ann, labels_testing))
}
model4 = calculatePredictionML(cancer, "Class", 0.8)
require("rpart")
require("e1071")
require("nnet")
calculatePredictionML = function(data, target, percentage){
n = floor(nrow(data)*as.numeric(percentage)) + 1
trainingIndexes = sort(sample(1:dim(data)[1], size = n))
testingIndexes = setdiff(1:dim(data)[1], trainingIndexes)
trainingSet = data[trainingIndexes,]
testingSet  = data[-trainingIndexes,]
labels_testing = data[testingIndexes,target]
formula = as.formula(paste(target, "~", paste(".",sep = "")))
model_tree = rpart(formula, data = trainingSet)
predicts_tree = unname(predict(model_tree, testingSet, type="class"))
results_percentage_tree = sum(predicts_tree == labels_testing)/length(predicts_tree)
results_tree = as.data.frame(cbind(as.character(predicts_tree), as.character(labels_testing)))
results_tree["classification"] = ifelse(predicts_tree == labels_testing, "Good", "Bad")
colnames(results_tree) = c("predicted", "labels", "classification")
predict_tree = predict(model_tree, testingSet, type="prob")
rownames(results_tree) = as.numeric(rownames(testingSet))
model_svm = svm(formula, data = trainingSet)
predicts_svm = unname(predict(model_svm, testingSet))
model_svm2 = svm(formula, data = trainingSet, probability = TRUE)
predict_svm = predict(model_svm2, testingSet, type="prob", probability = TRUE)
results_percentage_svm = sum(predicts_svm == labels_testing)/length(predicts_svm)
results_svm = as.data.frame(cbind(as.character(predicts_svm), as.character(labels_testing)))
results_svm["classification"] = ifelse(predicts_svm == labels_testing, "Good", "Bad")
colnames(results_svm) = c("predicted", "labels", "classification")
rownames(results_svm) = as.numeric(rownames(testingSet))
model_ann = nnet(formula, size = 10, data = trainingSet,trace = FALSE)
predicts_ann = unname(predict(model_ann, testingSet, type = "class"))
predict_ann = predict(model_ann, testingSet)
results_percentage_ann = sum(predicts_ann == labels_testing)/length(predicts_ann)
results_ann = as.data.frame(cbind(as.character(predicts_ann), as.character(labels_testing)))
results_ann["classification"] = ifelse(predicts_ann == labels_testing, "Good", "Bad")
colnames(results_ann) = c("predicted", "labels", "classification")
rownames(results_ann) = as.numeric(rownames(testingSet))
return(list(results_tree, results_svm, results_ann, predict_tree, predict_svm, predict_ann, labels_testing))
}
model4 = calculatePredictionML(cancer, "Class", 0.8)
model4[[5]]
pred5  = prediction(model4[[5]][,2],model4[[7]])
pred5  = prediction(model4[[5]][,M],model4[[7]])
a = model4[[5]]
a
pred5  = prediction(attr(model4[[5]], "probabilities")[,2],model4[[7]])
perf5  = performance(pred5,"tpr","fpr")
plot(perf5, add=TRUE, col = 5)
require('lme4')
require("igraph")
calculateROC = function(){
model1 = calculatePrediction(cancer, "Class", 0.8, "linear")
pred1  = prediction(model1[[4]],model1[[5]])
perf1  = performance(pred1,"tpr","fpr")
model2 = calculatePrediction(cancer, "Class", 0.8, "exponential")
pred2  = prediction(model2[[4]],model2[[5]])
perf2  = performance(pred2,"tpr","fpr")
model3 = calculatePrediction(cancer, "Class", 0.8, "quadratic")
pred3  = prediction(model3[[4]],model3[[5]])
perf13  = performance(pred3,"tpr","fpr")
model7 = calculatePrediction(cancer, "Class", 0.8, "reciprocal")
pred7  = prediction(model7[[4]],model7[[5]])
perf7  = performance(pred7,"tpr","fpr")
model4 = calculatePredictionML(cancer, "Class", 0.8)
pred4  = prediction(model4[[4]][,2],model4[[7]])
perf4  = performance(pred4,"tpr","fpr")
pred5  = prediction(attr(model4[[5]], "probabilities")[,2],model4[[7]])
perf5  = performance(pred5,"tpr","fpr")
pred6  = prediction(model4[[6]],model4[[7]])
perf6  = performance(pred6,"tpr","fpr")
plot(perf1, col = 1)
plot(perf2, add=TRUE, col = 2)
plot(perf3, add=TRUE, col = 3)
plot(perf4, add=TRUE, col = 4)
plot(perf5, add=TRUE, col = 5)
plot(perf6, add=TRUE, col = 6)
plot(perf7, add=TRUE, col = 7)
legend("right", legend = c("Redes parenclíticas (lineal)", "Redes parenclíticas (exponencial)", "Redes parenclíticas (cuadrático)", "Redes parenclíticas (recíproco)", "Árboles de decisión", "SVM", "Redes neuronales"), col = c(1:7), lty = 1)
abline(a=0, b= 1)
}
require('lme4')
require("igraph")
calculateROC = function(){
model1 = calculatePrediction(cancer, "Class", 0.8, "linear")
pred1  = prediction(model1[[4]],model1[[5]])
perf1  = performance(pred1,"tpr","fpr")
model2 = calculatePrediction(cancer, "Class", 0.8, "exponential")
pred2  = prediction(model2[[4]],model2[[5]])
perf2  = performance(pred2,"tpr","fpr")
model3 = calculatePrediction(cancer, "Class", 0.8, "quadratic")
pred3  = prediction(model3[[4]],model3[[5]])
perf13  = performance(pred3,"tpr","fpr")
model7 = calculatePrediction(cancer, "Class", 0.8, "reciprocal")
pred7  = prediction(model7[[4]],model7[[5]])
perf7  = performance(pred7,"tpr","fpr")
model4 = calculatePredictionML(cancer, "Class", 0.8)
pred4  = prediction(model4[[4]][,2],model4[[7]])
perf4  = performance(pred4,"tpr","fpr")
pred5  = prediction(attr(model4[[5]], "probabilities")[,2],model4[[7]])
perf5  = performance(pred5,"tpr","fpr")
pred6  = prediction(model4[[6]],model4[[7]])
perf6  = performance(pred6,"tpr","fpr")
plot(perf1, col = 1)
plot(perf2, add=TRUE, col = 2)
plot(perf3, add=TRUE, col = 3)
plot(perf4, add=TRUE, col = 4)
plot(perf5, add=TRUE, col = 5)
plot(perf6, add=TRUE, col = 6)
plot(perf7, add=TRUE, col = 7)
legend("right", legend = c("Redes parenclíticas (lineal)", "Redes parenclíticas (exponencial)", "Redes parenclíticas (cuadrático)", "Redes parenclíticas (recíproco)", "Árboles de decisión", "SVM", "Redes neuronales"), col = c(1:7), lty = 1)
abline(a=0, b= 1)
}
calculateROC()
require('lme4')
require("igraph")
calculateROC = function(){
model1 = calculatePrediction(cancer, "Class", 0.8, "linear")
pred1  = prediction(model1[[4]],model1[[5]])
perf1  = performance(pred1,"tpr","fpr")
model2 = calculatePrediction(cancer, "Class", 0.8, "exponential")
pred2  = prediction(model2[[4]],model2[[5]])
perf2  = performance(pred2,"tpr","fpr")
model3 = calculatePrediction(cancer, "Class", 0.8, "quadratic")
pred3  = prediction(model3[[4]],model3[[5]])
perf3  = performance(pred3,"tpr","fpr")
model7 = calculatePrediction(cancer, "Class", 0.8, "reciprocal")
pred7  = prediction(model7[[4]],model7[[5]])
perf7  = performance(pred7,"tpr","fpr")
model4 = calculatePredictionML(cancer, "Class", 0.8)
pred4  = prediction(model4[[4]][,2],model4[[7]])
perf4  = performance(pred4,"tpr","fpr")
pred5  = prediction(attr(model4[[5]], "probabilities")[,2],model4[[7]])
perf5  = performance(pred5,"tpr","fpr")
pred6  = prediction(model4[[6]],model4[[7]])
perf6  = performance(pred6,"tpr","fpr")
plot(perf1, col = 1)
plot(perf2, add=TRUE, col = 2)
plot(perf3, add=TRUE, col = 3)
plot(perf4, add=TRUE, col = 4)
plot(perf5, add=TRUE, col = 5)
plot(perf6, add=TRUE, col = 6)
plot(perf7, add=TRUE, col = 7)
legend("right", legend = c("Redes parenclíticas (lineal)", "Redes parenclíticas (exponencial)", "Redes parenclíticas (cuadrático)", "Redes parenclíticas (recíproco)", "Árboles de decisión", "SVM", "Redes neuronales"), col = c(1:7), lty = 1)
abline(a=0, b= 1)
}
calculateROC()
set.seed(1) # just to get the same random numbers
par(xpd=FALSE) # this is usually the default
plot(1:3, rnorm(3), pch = 1, lty = 1, type = "o", ylim=c(-2,2), bty='L')
# this legend gets clipped:
legend(2.8,0,c("group A", "group B"), pch = c(1,2), lty = c(1,2))
# so turn off clipping:
par(xpd=TRUE)
legend(2.8,-1,c("group A", "group B"), pch = c(1,2), lty = c(1,2))
require('lme4')
require("igraph")
calculateROC = function(){
model1 = calculatePrediction(cancer, "Class", 0.8, "linear")
pred1  = prediction(model1[[4]],model1[[5]])
perf1  = performance(pred1,"tpr","fpr")
model2 = calculatePrediction(cancer, "Class", 0.8, "exponential")
pred2  = prediction(model2[[4]],model2[[5]])
perf2  = performance(pred2,"tpr","fpr")
model3 = calculatePrediction(cancer, "Class", 0.8, "quadratic")
pred3  = prediction(model3[[4]],model3[[5]])
perf3  = performance(pred3,"tpr","fpr")
model7 = calculatePrediction(cancer, "Class", 0.8, "reciprocal")
pred7  = prediction(model7[[4]],model7[[5]])
perf7  = performance(pred7,"tpr","fpr")
model4 = calculatePredictionML(cancer, "Class", 0.8)
pred4  = prediction(model4[[4]][,2],model4[[7]])
perf4  = performance(pred4,"tpr","fpr")
pred5  = prediction(attr(model4[[5]], "probabilities")[,2],model4[[7]])
perf5  = performance(pred5,"tpr","fpr")
pred6  = prediction(model4[[6]],model4[[7]])
perf6  = performance(pred6,"tpr","fpr")
plot(perf1, col = 1)
plot(perf2, add=TRUE, col = 2)
plot(perf3, add=TRUE, col = 3)
plot(perf4, add=TRUE, col = 4)
plot(perf5, add=TRUE, col = 5)
plot(perf6, add=TRUE, col = 6)
plot(perf7, add=TRUE, col = 7)
legend("right", legend = c("Redes parenclíticas (lineal)", "Redes parenclíticas (exponencial)", "Redes parenclíticas (cuadrático)", "Redes parenclíticas (recíproco)", "Árboles de decisión", "SVM", "Redes neuronales"), col = c(1:7))
abline(a=0, b= 1)
}
calculateROC()
require('lme4')
require("igraph")
calculateROC = function(){
model1 = calculatePrediction(cancer, "Class", 0.8, "linear")
pred1  = prediction(model1[[4]],model1[[5]])
perf1  = performance(pred1,"tpr","fpr")
model2 = calculatePrediction(cancer, "Class", 0.8, "exponential")
pred2  = prediction(model2[[4]],model2[[5]])
perf2  = performance(pred2,"tpr","fpr")
model3 = calculatePrediction(cancer, "Class", 0.8, "quadratic")
pred3  = prediction(model3[[4]],model3[[5]])
perf3  = performance(pred3,"tpr","fpr")
model7 = calculatePrediction(cancer, "Class", 0.8, "reciprocal")
pred7  = prediction(model7[[4]],model7[[5]])
perf7  = performance(pred7,"tpr","fpr")
model4 = calculatePredictionML(cancer, "Class", 0.8)
pred4  = prediction(model4[[4]][,2],model4[[7]])
perf4  = performance(pred4,"tpr","fpr")
pred5  = prediction(attr(model4[[5]], "probabilities")[,2],model4[[7]])
perf5  = performance(pred5,"tpr","fpr")
pred6  = prediction(model4[[6]],model4[[7]])
perf6  = performance(pred6,"tpr","fpr")
plot(perf1, col = 1)
plot(perf2, add=TRUE, col = 2)
plot(perf3, add=TRUE, col = 3)
plot(perf4, add=TRUE, col = 4)
plot(perf5, add=TRUE, col = 5)
plot(perf6, add=TRUE, col = 6)
plot(perf7, add=TRUE, col = 7)
legend("right", legend = c("Redes parenclíticas (lineal)", "Redes parenclíticas (exponencial)", "Redes parenclíticas (cuadrático)", "Redes parenclíticas (recíproco)", "Árboles de decisión", "SVM", "Redes neuronales"), col = c(1:7), lty = 1, cex=0.5)
abline(a=0, b= 1)
}
calculateROC()
require('lme4')
require("igraph")
calculateROC = function(){
model1 = calculatePrediction(cancer, "Class", 0.8, "linear")
pred1  = prediction(model1[[4]],model1[[5]])
perf1  = performance(pred1,"tpr","fpr")
model2 = calculatePrediction(cancer, "Class", 0.8, "exponential")
pred2  = prediction(model2[[4]],model2[[5]])
perf2  = performance(pred2,"tpr","fpr")
model3 = calculatePrediction(cancer, "Class", 0.8, "quadratic")
pred3  = prediction(model3[[4]],model3[[5]])
perf3  = performance(pred3,"tpr","fpr")
model7 = calculatePrediction(cancer, "Class", 0.8, "reciprocal")
pred7  = prediction(model7[[4]],model7[[5]])
perf7  = performance(pred7,"tpr","fpr")
model4 = calculatePredictionML(cancer, "Class", 0.8)
pred4  = prediction(model4[[4]][,2],model4[[7]])
perf4  = performance(pred4,"tpr","fpr")
pred5  = prediction(attr(model4[[5]], "probabilities")[,2],model4[[7]])
perf5  = performance(pred5,"tpr","fpr")
pred6  = prediction(model4[[6]],model4[[7]])
perf6  = performance(pred6,"tpr","fpr")
plot(perf1, col = 1)
plot(perf2, add=TRUE, col = 2)
plot(perf3, add=TRUE, col = 3)
plot(perf4, add=TRUE, col = 4)
plot(perf5, add=TRUE, col = 5)
plot(perf6, add=TRUE, col = 6)
plot(perf7, add=TRUE, col = 7)
legend("bottomright", legend = c("Redes parenclíticas (lineal)", "Redes parenclíticas (exponencial)", "Redes parenclíticas (cuadrático)", "Redes parenclíticas (recíproco)", "Árboles de decisión", "SVM", "Redes neuronales"), col = c(1:7), lty = 1, cex=0.5)
abline(a=0, b= 1)
}
plot(perf1, col = 1)
plot(perf2, add=TRUE, col = 2)
plot(perf3, add=TRUE, col = 3)
plot(perf4, add=TRUE, col = 4)
plot(perf5, add=TRUE, col = 5)
plot(perf6, add=TRUE, col = 6)
plot(perf7, add=TRUE, col = 7)
legend("bottomright", legend = c("Redes parenclíticas (lineal)", "Redes parenclíticas (exponencial)", "Redes parenclíticas (cuadrático)", "Redes parenclíticas (recíproco)", "Árboles de decisión", "SVM", "Redes neuronales"), col = c(1:7), lty = 1, cex=0.5)
abline(a=0, b= 1)
plot(perf1, col = 1)
plot(perf2, add=TRUE, col = 2)
model1 = calculatePrediction(cancer, "Class", 0.8, "linear")
pred1  = prediction(model1[[4]],model1[[5]])
perf1  = performance(pred1,"tpr","fpr")
model2 = calculatePrediction(cancer, "Class", 0.8, "exponential")
pred2  = prediction(model2[[4]],model2[[5]])
perf2  = performance(pred2,"tpr","fpr")
model3 = calculatePrediction(cancer, "Class", 0.8, "quadratic")
pred3  = prediction(model3[[4]],model3[[5]])
perf3  = performance(pred3,"tpr","fpr")
model7 = calculatePrediction(cancer, "Class", 0.8, "reciprocal")
pred7  = prediction(model7[[4]],model7[[5]])
perf7  = performance(pred7,"tpr","fpr")
model4 = calculatePredictionML(cancer, "Class", 0.8)
pred4  = prediction(model4[[4]][,2],model4[[7]])
perf4  = performance(pred4,"tpr","fpr")
pred5  = prediction(attr(model4[[5]], "probabilities")[,2],model4[[7]])
perf5  = performance(pred5,"tpr","fpr")
pred6  = prediction(model4[[6]],model4[[7]])
perf6  = performance(pred6,"tpr","fpr")
plot(perf1, col = 1)
plot(perf2, add=TRUE, col = 2)
plot(perf3, add=TRUE, col = 3)
plot(perf4, add=TRUE, col = 4)
plot(perf5, add=TRUE, col = 5)
plot(perf6, add=TRUE, col = 6)
plot(perf7, add=TRUE, col = 7)
legend("bottomright", legend = c("Redes parenclíticas (lineal)", "Redes parenclíticas (exponencial)", "Redes parenclíticas (cuadrático)", "Redes parenclíticas (recíproco)", "Árboles de decisión", "SVM", "Redes neuronales"), col = c(1:7), lty = 1, cex=0.5)
abline(a=0, b=1)
