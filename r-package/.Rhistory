a = list(1,2,34)
b = rep(a,1)
b
a = list(1,2,34,4)
b
source("scripts/drawParencliticsNetworks.R")
source("scripts/multiplot.R")
require("igraph")
require("e1071")
calculatePrediction = function(data, target, percentage, type){
n = floor(nrow(data)*as.numeric(percentage)) + 1
trainingIndexes = sort(sample(nrow(data), size = n))
testingIndexes = setdiff(1:dim(data)[1], trainingIndexes)
trainingSet = data[trainingIndexes,]
testingSet  = data[-trainingIndexes,]
labels_testing = data[testingIndexes,target]
cat("labels indexes", length(labels_testing), "\n")
for(interval in seq(from = 0, to = 1, by = 0.01)){
cat(paste("Interval:", interval, "\n"))
parencliticsnetworks = array()
clustering_coefficient = array()
link_density = array()
efficiency = array()
caracteristic_path_length = array()
labels = data[trainingIndexes, target]
network_list = list()
for(observation in trainingIndexes){
cat(paste("Observation:", observation, "\n"))
ady = getParenclitsNetworks(data, target, observation)
network_list[[length(network_list)+1]] = graph.adjacency(ady, weighted=T, mode = "undirected")
}
min = Inf
max = -Inf
nets =  rep(network_list,1)
for(network in network_list){
weights = E(network)$weight
if(min(weights, na.rm = TRUE) < min){
min = min(weights, na.rm = TRUE)
}
if(max(weights, na.rm = TRUE) > max){
max = max(weights, na.rm = TRUE)
}
}
cat(paste("Min:", min, "\n"))
cat(paste("Max:", max, "\n"))
cat("Lista de redes:\n")
observation = 1
for(net in nets){
cat(paste("Observation:", observation,"\n"))
network_nodes = length(V(net))
E(net)$weight = 1/(max-min)*(E(net)$weight - min)
network.copy = delete.edges(net, which(E(net)$weight >= interval))
matrix_distance = shortest.paths(network.copy,weights=E(network.copy)$distance)
clustering_coefficient[observation] = transitivity(network.copy)
coef = 1/(network_nodes*(network_nodes - 1))
link_density[observation] = coef*sum(get.adjacency(net))
efficiency[observation] = coef*sum(1/matrix_distance[row(matrix_distance)!=col(matrix_distance)])
caracteristic_path_length[observation] = coef*sum(matrix_distance[row(matrix_distance)!=col(matrix_distance)])
observation = observation + 1
}
result_training = as.data.frame(cbind(clustering_coefficient, link_density, efficiency, caracteristic_path_length))
write.csv(labels, sep = ",", file = "salida.csv")
result_training = result_training[complete.cases(result_training),]
cat(paste("Length 3", length(labels),"\n"))
result_training[,"labels"] = labels
result_training[,"observation"] = as.numeric(rownames(result_training))
cat(paste("Length 4\n"))
p1 = ggplot(result_training, aes(x=observation, y=link_density, colour=labels, group=labels)) +
geom_line() + ggtitle("Link density")
p2 = ggplot(result_training, aes(x=observation, y=efficiency, colour=labels, group=labels)) +
geom_line() + ggtitle("Efficiency")
p3 = ggplot(result_training, aes(x=observation, y=clustering_coefficient, colour=labels, group=labels)) +
geom_line() + ggtitle("Clustering coeffcient")
p4 = ggplot(result_training, aes(x=observation, y=caracteristic_path_length, colour=labels, group=labels)) +
geom_line() + ggtitle("Characteristic path length")
plot_measures = list(p1, p2, p3, p4)
result_training[,"observation"] = NULL
parencliticsnetworks = array()
clustering_coefficient = array()
link_density = array()
efficiency = array()
caracteristic_path_length = array()
network_list = list()
for(observation in testingIndexes){
ady = parencliticNetwork(trainingSet, testingSet, target = target, test, type)
network_list[[length(network_list)+1]] = graph.adjacency(ady, weighted=T, mode = "undirected")
}
min = Inf
max = -Inf
for(network in network_list){
weights = E(network)$weight
if(min(weights) < min){
min = min(weights)
}
if(max(weights) > max){
max = max(weights)
}
}
for(network in network_list){
network_nodes = length(V(network))
E(network) = 1/(max-min)*(E(network)$weight - min)
network.copy <- delete.edges(network, which(E(network)$weight >= interval))
matrix_distance = shortest.paths(network.copy, weights=E(network.copy)$distance)
clustering_coefficient[observation] = transitivity(network)
coef = 1/(network_nodes*(network_nodes - 1))
link_density[observation] = coef*sum(ady)
efficiency[observation] = coef*sum(1/matrix_distance[row(matrix_distance)!=col(matrix_distance)])
caracteristic_path_length[observation] = coef*sum(matrix_distance[row(matrix_distance)!=col(matrix_distance)])
}
result_testing = as.data.frame(cbind(clustering_coefficient, link_density, efficiency, caracteristic_path_length))
result_testing = result_testing[complete.cases(result_testing),]
cat("Testing indexes")
print(testingIndexes)
model = nnet(labels ~ ., data = result_training, size=50, maxit = 1000, MaxNWts = 10000)
predicts = predict(model, result_testing, type = "class")
#predict = predict(model, result_testing)
predicts = unname(predicts)
View(testingSet)
results_percentage = sum(predicts == labels_testing)/length(predicts)
sum(predicts == labels_testing)/length(predicts)
results = as.data.frame(cbind(as.character(predicts), as.character(labels_testing)))
results["classification"] = ifelse(predicts == labels_testing, "Good", "Bad")
colnames(results) = c("predicted", "labels", "classification")
rownames(results) = as.numeric(rownames(testingSet))
cat(paste("Classification with type", type, "and interval", interval, "is", results_percentage, "\n"))
}
#return(list(results_percentage, results, plot_measures, labels_testing))
}
calculatePrediction(data, "Class", 0.8, "linear")
n = floor(nrow(data)*as.numeric(percentage)) + 1
trainingIndexes = sort(sample(nrow(data), size = n))
testingIndexes = setdiff(1:dim(data)[1], trainingIndexes)
trainingSet = data[trainingIndexes,]
testingSet  = data[-trainingIndexes,]
labels_testing = data[testingIndexes,target]
target = "Class"
percentage = 0.8
type = "linear"
n = floor(nrow(data)*as.numeric(percentage)) + 1
trainingIndexes = sort(sample(nrow(data), size = n))
testingIndexes = setdiff(1:dim(data)[1], trainingIndexes)
trainingSet = data[trainingIndexes,]
testingSet  = data[-trainingIndexes,]
labels_testing = data[testingIndexes,target]
cat("labels indexes", length(labels_testing), "\n")
interval = 0
cat(paste("Interval:", interval, "\n"))
parencliticsnetworks = array()
clustering_coefficient = array()
link_density = array()
efficiency = array()
caracteristic_path_length = array()
labels = data[trainingIndexes, target]
network_list = list()
for(observation in trainingIndexes){
cat(paste("Observation:", observation, "\n"))
ady = getParenclitsNetworks(data, target, observation)
network_list[[length(network_list)+1]] = graph.adjacency(ady, weighted=T, mode = "undirected")
}
min = Inf
max = -Inf
nets =  rep(network_list,1)
for(network in network_list){
weights = E(network)$weight
if(min(weights, na.rm = TRUE) < min){
min = min(weights, na.rm = TRUE)
}
if(max(weights, na.rm = TRUE) > max){
max = max(weights, na.rm = TRUE)
}
}
cat(paste("Min:", min, "\n"))
cat(paste("Max:", max, "\n"))
observation = 1
for(net in nets){
cat(paste("Observation:", observation,"\n"))
network_nodes = length(V(net))
E(net)$weight = 1/(max-min)*(E(net)$weight - min)
network.copy = delete.edges(net, which(E(net)$weight >= interval))
matrix_distance = shortest.paths(network.copy,weights=E(network.copy)$distance)
clustering_coefficient[observation] = transitivity(network.copy)
coef = 1/(network_nodes*(network_nodes - 1))
link_density[observation] = coef*sum(get.adjacency(net))
efficiency[observation] = coef*sum(1/matrix_distance[row(matrix_distance)!=col(matrix_distance)])
caracteristic_path_length[observation] = coef*sum(matrix_distance[row(matrix_distance)!=col(matrix_distance)])
observation = observation + 1
}
result_training = as.data.frame(cbind(clustering_coefficient, link_density, efficiency, caracteristic_path_length))
View(result_training)
result_training = result_training[complete.cases(result_training),]
View(result_training)
result_training = as.data.frame(cbind(clustering_coefficient, link_density, efficiency, caracteristic_path_length))
View(result_training)
result_training[,"labels"] = labels
result_training[,"observation"] = as.numeric(rownames(result_training))
p1 = ggplot(result_training, aes(x=observation, y=link_density, colour=labels, group=labels)) +
geom_line() + ggtitle("Link density")
result_training[,"observation"] = NULL
parencliticsnetworks = array()
clustering_coefficient = array()
link_density = array()
efficiency = array()
caracteristic_path_length = array()
network_list = list()
for(observation in testingIndexes){
ady = parencliticNetwork(trainingSet, testingSet, target = target, test, type)
network_list[[length(network_list)+1]] = graph.adjacency(ady, weighted=T, mode = "undirected")
}
for(test in testingIndexes){
ady = parencliticNetwork(trainingSet, testingSet, target = target, test, type)
network_list[[length(network_list)+1]] = graph.adjacency(ady, weighted=T, mode = "undirected")
}
min = Inf
max = -Inf
for(network in network_list){
weights = E(network)$weight
if(min(weights) < min){
min = min(weights)
}
if(max(weights) > max){
max = max(weights)
}
}
for(test in testingIndexes){
ady = parencliticNetwork(trainingSet, testingSet, target = target, test, type)
network_list[[length(network_list)+1]] = graph.adjacency(ady, weighted=T, mode = "undirected")
}
min = Inf
max = -Inf
nets = rep(network_list, 1)
for(network in network_list){
weights = E(network)$weight
if(min(weights) < min){
min = min(weights)
}
if(max(weights) > max){
max = max(weights)
}
}
for(network in network_list){
network_nodes = length(V(network))
E(network)$weight = 1/(max-min)*(E(network)$weight - min)
network.copy <- delete.edges(network, which(E(network)$weight >= interval))
matrix_distance = shortest.paths(network.copy, weights=E(network.copy)$distance)
clustering_coefficient[observation] = transitivity(network)
coef = 1/(network_nodes*(network_nodes - 1))
link_density[observation] = coef*sum(get.adjacency(network.copy))
efficiency[observation] = coef*sum(1/matrix_distance[row(matrix_distance)!=col(matrix_distance)])
caracteristic_path_length[observation] = coef*sum(matrix_distance[row(matrix_distance)!=col(matrix_distance)])
}
result_testing = as.data.frame(cbind(clustering_coefficient, link_density, efficiency, caracteristic_path_length))
print(testingIndexes)
View(result_testing)
model = nnet(labels ~ ., data = result_training, size=50, maxit = 1000, MaxNWts = 10000)
library("nnet")
model = nnet(labels ~ ., data = result_training, size=50, maxit = 1000, MaxNWts = 10000)
predicts = predict(model, result_testing, type = "class")
result_testing = as.data.frame(cbind(clustering_coefficient, link_density, efficiency, caracteristic_path_length))
result_testing = result_testing[complete.cases(result_testing),]
cat("Testing indexes")
print(testingIndexes)
View(result_testing)
model = nnet(labels ~ ., data = result_training, size=50, maxit = 1000, MaxNWts = 10000)
predicts = predict(model, result_testing, type = "class")
predicts
predicts = predict(model, result_testing, type = "class")
result_testing = as.data.frame(cbind(clustering_coefficient, link_density, efficiency, caracteristic_path_length))
result_testing[which(!is.finite(result_testing))] = 0
result_testing = result_testing[complete.cases(result_testing),]
cat("Testing indexes")
print(testingIndexes)
model = nnet(labels ~ ., data = result_training, size=50, maxit = 1000, MaxNWts = 10000)
View(result_training)
result_training[which(!is.finite(result_training))] = 0
result_training[which(!is.finite(result_training)),1] = 0
result_training
which(!is.finite(result_training))   # not generally a useful result
which(!is.finite(result_training[,1]))   # not generally a useful result
result[which(!is.finite(result_training[,])),] = 0    # not generally a useful result
result_training[which(!is.finite(result_training[,])),] = 0    # not generally a useful result
do.call(data.frame,lapply(result_training, function(x) replace(x, is.infinite(x),0)))
View(result_training)
do.call(data.frame,lapply(result_training[,c(1,2,3,4)], function(x) replace(x, is.infinite(x),0)))
a = Nan
a = NaN
is.finite(a)
do.call(data.frame,lapply(result_training[,c(1,2,3,4)], function(x) replace(x, is.finite(x),0)))
do.call(data.frame,lapply(result_training[,c(1,2,3,4)], function(x) replace(x, !is.finite(x),0)))
result_training = as.data.frame(cbind(clustering_coefficient, link_density, efficiency, caracteristic_path_length))
do.call(data.frame,lapply(result_training[,c(1,2,3,4)], function(x) replace(x, !is.finite(x),0)))
for(net in nets){
cat(paste("Observation:", observation,"\n"))
network_nodes = length(V(net))
E(net)$weight = 1/(max-min)*(E(net)$weight - min)
network.copy = delete.edges(net, which(E(net)$weight >= interval))
matrix_distance = shortest.paths(network.copy,weights=E(network.copy)$distance)
clustering_coefficient[observation] = transitivity(network.copy)
coef = 1/(network_nodes*(network_nodes - 1))
link_density[observation] = coef*sum(get.adjacency(net))
efficiency[observation] = coef*sum(1/matrix_distance[row(matrix_distance)!=col(matrix_distance)])
caracteristic_path_length[observation] = coef*sum(matrix_distance[row(matrix_distance)!=col(matrix_distance)])
observation = observation + 1
}
result_training = as.data.frame(cbind(clustering_coefficient, link_density, efficiency, caracteristic_path_length))
View(result_trainign)
View(result_training)
do.call(data.frame,lapply(result_training[,c(1,2,3,4)], function(x) replace(x, !is.finite(x),0)))
View(result_training)
result_training = result_training[complete.cases(result_training),]
View(result_training)
for(net in nets){
cat(paste("Observation:", observation,"\n"))
network_nodes = length(V(net))
E(net)$weight = 1/(max-min)*(E(net)$weight - min)
network.copy = delete.edges(net, which(E(net)$weight >= interval))
matrix_distance = shortest.paths(network.copy,weights=E(network.copy)$distance)
clustering_coefficient[observation] = transitivity(network.copy)
coef = 1/(network_nodes*(network_nodes - 1))
link_density[observation] = coef*sum(get.adjacency(net))
efficiency[observation] = coef*sum(1/matrix_distance[row(matrix_distance)!=col(matrix_distance)])
caracteristic_path_length[observation] = coef*sum(matrix_distance[row(matrix_distance)!=col(matrix_distance)])
observation = observation + 1
}
View(result_training)
result_training = as.data.frame(cbind(clustering_coefficient, link_density, efficiency, caracteristic_path_length))
View(result_training)
do.call(data.frame,lapply(result_training[,c(1,2,3,4)], function(x) replace(x, !is.finite(x),0)))
View(result_training)
result_training = do.call(data.frame,lapply(result_training[,c(1,2,3,4)], function(x) replace(x, !is.finite(x),0)))
View(result_training)
result_training[,"labels"] = labels
is.finite(NA)
result_training[,"labels"] = labels
result_training[,"labels"] = labels[1_547]
result_training[,"labels"] = labels[1:547]
result_training[,"labels"] = labels[seq(1,547)]
model = nnet(labels ~ ., data = result_training, size=50, maxit = 1000, MaxNWts = 10000)
linear = c(42,42,42,42,94,42,42,42,94,42,42,42,42,42,42,42,42,42,42,94,42,42,94,42,94,94,42,94,94,42,94,94,42,94,94,94,94,94,94,94,94,94,94,94,42,42,94,94,42,94,42,42,94,94,42,94,94,94,42,94,42,42,94,94,94,94,94,42,42,42,94,94,42,94,42,42,42,42,42,42,42,94,94,42,42,94,42,42,94,42,42,94)
x = seq(0.1,1,0.01)
x
plot(x,linear)
length(linear)
linear = c(42,42,42,42,94,42,42,42,94,42,42,42,42,42,42,42,42,42,42,94,42,42,94,42,94,94,42,94,94,42,94,94,42,94,94,94,94,94,94,94,94,94,94,94,42,42,94,94,42,94,42,42,94,94,42,94,94,94,94,94,94,94,94,94,94,94,94,94,94,42,94,42,42,94,94,94,94,94,42,42,42,94,94,42,94,42,42,42,42,42,42,42,94,94,42,42,94,42,42,94,42,42,94)
length(linear)
linear = c(42,42,42,42,94,42,42,42,94,42,42,42,42,42,42,42,42,42,42,94,42,42,94,42,94,94,42,94,94,42,94,94,42,94,94,94,94,94,94,94,94,94,94,94,42,42,94,94,42,94,42,42,94,94,42,94,94,94,94,94,94,94,94,94,94,94,42,94,42,42,94,94,94,94,94,42,42,42,94,94,42,94,42,42,42,42,42,42,42,94,94,42,42,94,42,42,94,42,42,94)
length(x)
x
lengh(linear)
length(linear)
x = seq(0,1,0.01)
length(x)
linear = c(42,42,42,42,94,42,42,42,94,42,42,42,42,42,42,42,42,42,42,94,42,42,94,42,94,94,42,94,94,42,94,94,42,94,94,94,94,94,94,94,94,94,94,94,42,42,94,94,42,94,42,42,94,94,94,42,94,94,94,94,94,94,94,94,94,94,94,42,94,42,42,94,94,94,94,94,42,42,42,94,94,42,94,42,42,42,42,42,42,42,94,94,42,42,94,42,42,94,42,42,94)
plot(x,linear)
plot(x,linear, type="l")
x[1]=0
plot(x,linear, type="l")
linear[1]=0
plot(x,linear, type="l")
lo <- loess(linear~x)
lines(predict(lo), col='red', lwd=2)
plot(x,linear, type="l", col="1")
plot(x,linear, type="l", col="2")
plot(x,linear, type="l", col="3")
linear[1]=42
plot(x,linear/100, type="l", col="3")
exponential = c(55,55,55,55,81,55,55,55,55,55,55,81,55,55,81,55,55,55,81,55,81,81,55,81,55,81,81,81,81,81,81,55,55,81,81,81,81,55,55,55,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,55,81,81,81,81,81,81,55,81,55,81,81,81,55,81,55,81,55,55,81,55,55,81,81,81,81,55,55,81)
length(exponential)
exponential = c(55,55,55,55,81,55,55,55,55,55,55,81,55,55,81,55,55,55,81,55,81,81,55,81,55,81,81,81,81,81,81,55,55,81,81,81,81,55,55,55,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,55,81,81,81,81,81,81,55,81,55,81,81,81,55,81,55,81,55,55,81,55,55,81,81,81,81,55,55,81)
length(exponential)
exponential = c(55,55,55,55,81,55,55,55,55,55,55,81,55,55,81,55,55,55,81,55,81,81,55,81,55,81,81,81,81,81,81,55,55,81,81,81,81,55,55,55,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,55,81,81,81,81,81,81,55,81,55,81,81,81,55,81,55,81,55,55,81,55,55,81,81,81,81,55,55,81)
plot(x,exponential)
plot(x,exponential, type="l", col=4)
plot(x,exponential/100, type="l", col=4)
quadratic = c(54,54,54,82,54,54,54,54,54,54,54,54,54,54,54,54,82,54,54,54,82,82,54,54,82,82,82,54,82,54,82,82,82,82,82,82,82,54,82,82,54,82,82,82,82,54,82,82,82,82,54,82,82,54,82,82,82,54,82,82,82,82,82,82,54,82,82,54,54,82,54,54,82,82,82,54,54,82,54,82,54,54,54,82,82,54,54,54,54,82)
length(quadratic)
quadratic = c(54,54,54,82,54,54,54,54,54,54,54,54,54,54,54,54,82,54,54,54,82,82,54,54,82,82,82,54,82,54,82,82,82,82,82,82,82,54,82,82,54,82,82,82,82,54,82,82,82,82,54,82,82,54,82,82,82,82,82,82,82,82,82,82,82,82,82,54,82,82,82,82,82,82,54,82,82,54,54,82,54,54,82,82,82,54,54,82,54,82,54,54,54,82,82,54,54,54,54,82)
length(quadratic)
quadratic = c(54,54,54,82,54,54,54,54,54,54,54,54,54,54,54,54,82,54,54,54,82,82,54,54,82,82,82,54,82,54,82,82,82,82,82,82,82,54,82,82,54,82,82,82,82,54,82,82,82,82,54,82,82,54,82,82,82,82,82,82,82,82,82,82,82,82,82,82,54,82,82,82,82,82,82,54,82,82,54,54,82,54,54,82,82,82,54,54,82,54,82,54,54,54,82,82,54,54,54,54,82)
plot(x,quadratic)
plot(x,quadratic,type="l",col="5")
reciprocal = c(46,46,46,90,46,46,46,46,46,46,46,46,90,46,46,90,46,46,46,46,46,46,46,46,46,90,90,90,90,46,90,46,90,90,90,90,90,90,90,46,90,90,90,90,90,90,90,90,90,90,90,46,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,46,90,90,90,90,90,90,46,90,46,90,90,46,46,90,46,46,46,46,46,90,46,90,46,90,46,46,46,90,46,90)
plot(x,reciprocal)
length(reciprocal)
x[-60]
x=0:1:0.01
x=seq(0,1,0.01)
x
reciprocal[-60]
length(reciprocal)
reciprocal =reciprocal[-60]
length(reciprocal)
plot(x,reciprocal)
plot(x,reciprocal, type="l", col="4")
plot(x,reciprocal, type="l", col="5")
plot(x,reciprocal, type="l", col="6")
plot(x,reciprocal/100, type="l", col="6")
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
library("ggplot2")
df = as.data.frame(cbind(x,linear,exponential,quadratic,reciprocal))
df
ggplot(df, aes(x=
))
ChickWeight
ggplot(df, aes(x=x,y=reciprocal))
ggplot(df, aes(x=x,y=reciprocal)) + geom_line()
ggplot(df, aes(x=x,y=reciprocal)) + geom_path()
ggplot(df, aes(x=x,y=reciprocal)) + geom_line()
ggplot(df, aes(x=x,y=reciprocal)) + geom_line() + ggplot(df,aes(x=x,y=linear)) + geom_line()
ggplot() +
geom_line(data=df, aes(x=x, y=linear), color='green') +
geom_line(data=df, aes(x=x, y=exponential), color='red')
ggplot() +
geom_line(data=df, aes(x=x, y=linear), color='green') +
geom_line(data=df, aes(x=x, y=exponential), color='red') +
geom_line(data=df, aes(x=x, y=reciprocal), col="blue")+
geom_line(data=df, aes(x=x, y=quadratic), col="magenta")
geom_line(data=df, aes(x=x, y=quadratic), col="magenta")
ggplot() +
+     geom_line(data=df, aes(x=x, y=linear), color='green') +
+     geom_line(data=df, aes(x=x, y=exponential), color='red') +
+     geom_line(data=df, aes(x=x, y=reciprocal), col="blue")+
+     geom_line(data=df, aes(x=x, y=quadratic), col="magenta")
ggplot() +
geom_line(data=df, aes(x=x, y=linear), color='green') +
geom_line(data=df, aes(x=x, y=exponential), color='red') +
geom_line(data=df, aes(x=x, y=reciprocal), col="blue")+
geom_line(data=df, aes(x=x, y=quadratic), col="magenta")
ggplot() +
geom_line(data=df, aes(x=x, y=linear), color='green') +
geom_line(data=df, aes(x=x, y=exponential), color='red') +
geom_line(data=df, aes(x=x, y=reciprocal), col="blue")+
geom_line(data=df, aes(x=x, y=quadratic), col="magenta") +
scale_shape_discrete(name  ="Tipo",
breaks=c("Female", "Male","A","B")
)
ggplot() +
geom_line(data=df, aes(x=x, y=variable), color=variable)
d <- melt(df, id.vars="x")
library("reshape")
library(reshape2)
d <- melt(df, id.vars="x")
d
ggplot(d, aes(x,value, col=variable)) +
geom_point() +
stat_smooth()
ggplot(d, aes(x,value, col=variable)) +
geom_line()
ggplot(d, aes(x,value, col=variable)) +
geom_line(size=1.5)
ggplot(d, aes(x,value, col=variable)) +
geom_line(size=1.2)
ggplot(d, aes(x,value, col=variable)) +
geom_line(size=1.1)
ggplot(d, aes(x,value, col=variable)) +
geom_line(size=1)
ggplot(d, aes(x,value, col=variable)) +
geom_line(size=1.05)
ggplot(d, aes(x,value, col=variable)) +
geom_line(size=1.1)
ggplot(d, aes(x,value, col=variable)) +
geom_line(size=1.1)+
theme_bw()
ggplot(d, aes(x,value, col=variable)) +
geom_line(size=1)+
theme_bw()
ggplot(d, aes(x,value, col=variable))+geom_line(size=1)+theme_bw()
ggplot(d, aes(x,value, col=variable))+geom_line(size=0.5)+theme_bw()
ggplot(d, aes(x,value, col=variable))+geom_line(size=0.8)+theme_bw()
ggplot(d, aes(x,value, col=variable))+geom_line(size=2)+theme_bw()
ggplot(d, aes(x,value, col=variable))+geom_line(size=2)+theme_bw(base_size = "CenturyGothic")
ggplot(d, aes(x,value, col=variable))+geom_line(size=2)+theme_bw()
ggplot(d, aes(x,value, col=variable))+geom_line(size=2)+theme_bw()
ggplot(d, aes(x,value, col=variable))+geom_line(size=2)+theme_bw()
library("ggplot2")
ggplot(d, aes(x,value, col=variable))+geom_line(size=2)+theme_bw()
